{"ast":null,"code":"var isHexDigit = require('../../tokenizer').isHexDigit;\n\nvar cmpChar = require('../../tokenizer').cmpChar;\n\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar NAME = require('../../tokenizer').NAME;\n\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\n\nvar U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nfunction eatHexSequence(offset, allowDash) {\n  for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n    var code = this.scanner.source.charCodeAt(pos);\n\n    if (code === HYPHENMINUS && allowDash && len !== 0) {\n      if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n        this.error();\n      }\n\n      return -1;\n    }\n\n    if (!isHexDigit(code)) {\n      this.error(allowDash && len !== 0 ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected' : len < 6 ? 'Hex digit is expected' : 'Unexpected input', pos);\n    }\n\n    if (++len > 6) {\n      this.error('Too many hex digits', pos);\n    }\n\n    ;\n  }\n\n  this.scanner.next();\n  return len;\n}\n\nfunction eatQuestionMarkSequence(max) {\n  var count = 0;\n\n  while (this.scanner.isDelim(QUESTIONMARK)) {\n    if (++count > max) {\n      this.error('Too many question marks');\n    }\n\n    this.scanner.next();\n  }\n}\n\nfunction startsWith(code) {\n  if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n    this.error(NAME[code] + ' is expected');\n  }\n} // https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\n\n\nfunction scanUnicodeRange() {\n  var hexLength = 0; // u '+' <ident-token> '?'*\n  // u '+' '?'+\n\n  if (this.scanner.isDelim(PLUSSIGN)) {\n    this.scanner.next();\n\n    if (this.scanner.tokenType === IDENT) {\n      hexLength = eatHexSequence.call(this, 0, true);\n\n      if (hexLength > 0) {\n        eatQuestionMarkSequence.call(this, 6 - hexLength);\n      }\n\n      return;\n    }\n\n    if (this.scanner.isDelim(QUESTIONMARK)) {\n      this.scanner.next();\n      eatQuestionMarkSequence.call(this, 5);\n      return;\n    }\n\n    this.error('Hex digit or question mark is expected');\n    return;\n  } // u <number-token> '?'*\n  // u <number-token> <dimension-token>\n  // u <number-token> <number-token>\n\n\n  if (this.scanner.tokenType === NUMBER) {\n    startsWith.call(this, PLUSSIGN);\n    hexLength = eatHexSequence.call(this, 1, true);\n\n    if (this.scanner.isDelim(QUESTIONMARK)) {\n      eatQuestionMarkSequence.call(this, 6 - hexLength);\n      return;\n    }\n\n    if (this.scanner.tokenType === DIMENSION || this.scanner.tokenType === NUMBER) {\n      startsWith.call(this, HYPHENMINUS);\n      eatHexSequence.call(this, 1, false);\n      return;\n    }\n\n    return;\n  } // u <dimension-token> '?'*\n\n\n  if (this.scanner.tokenType === DIMENSION) {\n    startsWith.call(this, PLUSSIGN);\n    hexLength = eatHexSequence.call(this, 1, true);\n\n    if (hexLength > 0) {\n      eatQuestionMarkSequence.call(this, 6 - hexLength);\n    }\n\n    return;\n  }\n\n  this.error();\n}\n\nmodule.exports = {\n  name: 'UnicodeRange',\n  structure: {\n    value: String\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart; // U or u\n\n    if (!cmpChar(this.scanner.source, start, U)) {\n      this.error('U is expected');\n    }\n\n    if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {\n      this.error('Plus sign is expected');\n    }\n\n    this.scanner.next();\n    scanUnicodeRange.call(this);\n    return {\n      type: 'UnicodeRange',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      value: this.scanner.substrToCursor(start)\n    };\n  },\n  generate: function (node) {\n    this.chunk(node.value);\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/UnicodeRange.js"],"names":["isHexDigit","require","cmpChar","TYPE","NAME","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","QUESTIONMARK","U","eatHexSequence","offset","allowDash","pos","scanner","tokenStart","len","tokenEnd","code","source","charCodeAt","call","error","next","eatQuestionMarkSequence","max","count","isDelim","startsWith","scanUnicodeRange","hexLength","tokenType","module","exports","name","structure","value","String","parse","start","type","loc","getLocation","substrToCursor","generate","node","chunk"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,UAA5C;;AACA,IAAIE,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,OAAzC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,IAAtC;;AACA,IAAIC,IAAI,GAAGH,OAAO,CAAC,iBAAD,CAAP,CAA2BG,IAAtC;;AAEA,IAAIC,KAAK,GAAGF,IAAI,CAACG,KAAjB;AACA,IAAIC,MAAM,GAAGJ,IAAI,CAACK,MAAlB;AACA,IAAIC,SAAS,GAAGN,IAAI,CAACO,SAArB;AACA,IAAIC,QAAQ,GAAG,MAAf,C,CAA2B;;AAC3B,IAAIC,WAAW,GAAG,MAAlB,C,CAA2B;;AAC3B,IAAIC,YAAY,GAAG,MAAnB,C,CAA2B;;AAC3B,IAAIC,CAAC,GAAG,MAAR,C,CAA2B;;AAE3B,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AACvC,OAAK,IAAIC,GAAG,GAAG,KAAKC,OAAL,CAAaC,UAAb,GAA0BJ,MAApC,EAA4CK,GAAG,GAAG,CAAvD,EAA0DH,GAAG,GAAG,KAAKC,OAAL,CAAaG,QAA7E,EAAuFJ,GAAG,EAA1F,EAA8F;AAC1F,QAAIK,IAAI,GAAG,KAAKJ,OAAL,CAAaK,MAAb,CAAoBC,UAApB,CAA+BP,GAA/B,CAAX;;AAEA,QAAIK,IAAI,KAAKX,WAAT,IAAwBK,SAAxB,IAAqCI,GAAG,KAAK,CAAjD,EAAoD;AAChD,UAAIN,cAAc,CAACW,IAAf,CAAoB,IAApB,EAA0BV,MAAM,GAAGK,GAAT,GAAe,CAAzC,EAA4C,KAA5C,MAAuD,CAA3D,EAA8D;AAC1D,aAAKM,KAAL;AACH;;AAED,aAAO,CAAC,CAAR;AACH;;AAED,QAAI,CAAC3B,UAAU,CAACuB,IAAD,CAAf,EAAuB;AACnB,WAAKI,KAAL,CACIV,SAAS,IAAII,GAAG,KAAK,CAArB,GACM,iBAAiBA,GAAG,GAAG,CAAN,GAAU,eAAV,GAA4B,EAA7C,IAAmD,cADzD,GAEOA,GAAG,GAAG,CAAN,GAAU,uBAAV,GAAoC,kBAH/C,EAIIH,GAJJ;AAMH;;AAED,QAAI,EAAEG,GAAF,GAAQ,CAAZ,EAAe;AACX,WAAKM,KAAL,CAAW,qBAAX,EAAkCT,GAAlC;AACH;;AAAA;AACJ;;AAED,OAAKC,OAAL,CAAaS,IAAb;AACA,SAAOP,GAAP;AACH;;AAED,SAASQ,uBAAT,CAAiCC,GAAjC,EAAsC;AAClC,MAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAO,KAAKZ,OAAL,CAAaa,OAAb,CAAqBnB,YAArB,CAAP,EAA2C;AACvC,QAAI,EAAEkB,KAAF,GAAUD,GAAd,EAAmB;AACf,WAAKH,KAAL,CAAW,yBAAX;AACH;;AAED,SAAKR,OAAL,CAAaS,IAAb;AACH;AACJ;;AAED,SAASK,UAAT,CAAoBV,IAApB,EAA0B;AACtB,MAAI,KAAKJ,OAAL,CAAaK,MAAb,CAAoBC,UAApB,CAA+B,KAAKN,OAAL,CAAaC,UAA5C,MAA4DG,IAAhE,EAAsE;AAClE,SAAKI,KAAL,CAAWvB,IAAI,CAACmB,IAAD,CAAJ,GAAa,cAAxB;AACH;AACJ,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,gBAAT,GAA4B;AACxB,MAAIC,SAAS,GAAG,CAAhB,CADwB,CAGxB;AACA;;AACA,MAAI,KAAKhB,OAAL,CAAaa,OAAb,CAAqBrB,QAArB,CAAJ,EAAoC;AAChC,SAAKQ,OAAL,CAAaS,IAAb;;AAEA,QAAI,KAAKT,OAAL,CAAaiB,SAAb,KAA2B/B,KAA/B,EAAsC;AAClC8B,MAAAA,SAAS,GAAGpB,cAAc,CAACW,IAAf,CAAoB,IAApB,EAA0B,CAA1B,EAA6B,IAA7B,CAAZ;;AACA,UAAIS,SAAS,GAAG,CAAhB,EAAmB;AACfN,QAAAA,uBAAuB,CAACH,IAAxB,CAA6B,IAA7B,EAAmC,IAAIS,SAAvC;AACH;;AACD;AACH;;AAED,QAAI,KAAKhB,OAAL,CAAaa,OAAb,CAAqBnB,YAArB,CAAJ,EAAwC;AACpC,WAAKM,OAAL,CAAaS,IAAb;AACAC,MAAAA,uBAAuB,CAACH,IAAxB,CAA6B,IAA7B,EAAmC,CAAnC;AACA;AACH;;AAED,SAAKC,KAAL,CAAW,wCAAX;AACA;AACH,GAxBuB,CA0BxB;AACA;AACA;;;AACA,MAAI,KAAKR,OAAL,CAAaiB,SAAb,KAA2B7B,MAA/B,EAAuC;AACnC0B,IAAAA,UAAU,CAACP,IAAX,CAAgB,IAAhB,EAAsBf,QAAtB;AACAwB,IAAAA,SAAS,GAAGpB,cAAc,CAACW,IAAf,CAAoB,IAApB,EAA0B,CAA1B,EAA6B,IAA7B,CAAZ;;AAEA,QAAI,KAAKP,OAAL,CAAaa,OAAb,CAAqBnB,YAArB,CAAJ,EAAwC;AACpCgB,MAAAA,uBAAuB,CAACH,IAAxB,CAA6B,IAA7B,EAAmC,IAAIS,SAAvC;AACA;AACH;;AAED,QAAI,KAAKhB,OAAL,CAAaiB,SAAb,KAA2B3B,SAA3B,IACA,KAAKU,OAAL,CAAaiB,SAAb,KAA2B7B,MAD/B,EACuC;AACnC0B,MAAAA,UAAU,CAACP,IAAX,CAAgB,IAAhB,EAAsBd,WAAtB;AACAG,MAAAA,cAAc,CAACW,IAAf,CAAoB,IAApB,EAA0B,CAA1B,EAA6B,KAA7B;AACA;AACH;;AAED;AACH,GA9CuB,CAgDxB;;;AACA,MAAI,KAAKP,OAAL,CAAaiB,SAAb,KAA2B3B,SAA/B,EAA0C;AACtCwB,IAAAA,UAAU,CAACP,IAAX,CAAgB,IAAhB,EAAsBf,QAAtB;AACAwB,IAAAA,SAAS,GAAGpB,cAAc,CAACW,IAAf,CAAoB,IAApB,EAA0B,CAA1B,EAA6B,IAA7B,CAAZ;;AAEA,QAAIS,SAAS,GAAG,CAAhB,EAAmB;AACfN,MAAAA,uBAAuB,CAACH,IAAxB,CAA6B,IAA7B,EAAmC,IAAIS,SAAvC;AACH;;AAED;AACH;;AAED,OAAKR,KAAL;AACH;;AAEDU,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,cADO;AAEbC,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAEC;AADA,GAFE;AAKbC,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,KAAK,GAAG,KAAKzB,OAAL,CAAaC,UAAzB,CADc,CAGd;;AACA,QAAI,CAAClB,OAAO,CAAC,KAAKiB,OAAL,CAAaK,MAAd,EAAsBoB,KAAtB,EAA6B9B,CAA7B,CAAZ,EAA6C;AACzC,WAAKa,KAAL,CAAW,eAAX;AACH;;AAED,QAAI,CAACzB,OAAO,CAAC,KAAKiB,OAAL,CAAaK,MAAd,EAAsBoB,KAAK,GAAG,CAA9B,EAAiCjC,QAAjC,CAAZ,EAAwD;AACpD,WAAKgB,KAAL,CAAW,uBAAX;AACH;;AAED,SAAKR,OAAL,CAAaS,IAAb;AACAM,IAAAA,gBAAgB,CAACR,IAAjB,CAAsB,IAAtB;AAEA,WAAO;AACHmB,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,WAAL,CAAiBH,KAAjB,EAAwB,KAAKzB,OAAL,CAAaC,UAArC,CAFF;AAGHqB,MAAAA,KAAK,EAAE,KAAKtB,OAAL,CAAa6B,cAAb,CAA4BJ,KAA5B;AAHJ,KAAP;AAKH,GAzBY;AA0BbK,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKC,KAAL,CAAWD,IAAI,CAACT,KAAhB;AACH;AA5BY,CAAjB","sourcesContent":["var isHexDigit = require('../../tokenizer').isHexDigit;\nvar cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NAME = require('../../tokenizer').NAME;\n\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)\n\nfunction eatHexSequence(offset, allowDash) {\n    for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n        var code = this.scanner.source.charCodeAt(pos);\n\n        if (code === HYPHENMINUS && allowDash && len !== 0) {\n            if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n                this.error();\n            }\n\n            return -1;\n        }\n\n        if (!isHexDigit(code)) {\n            this.error(\n                allowDash && len !== 0\n                    ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected'\n                    : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),\n                pos\n            );\n        }\n\n        if (++len > 6) {\n            this.error('Too many hex digits', pos);\n        };\n    }\n\n    this.scanner.next();\n    return len;\n}\n\nfunction eatQuestionMarkSequence(max) {\n    var count = 0;\n\n    while (this.scanner.isDelim(QUESTIONMARK)) {\n        if (++count > max) {\n            this.error('Too many question marks');\n        }\n\n        this.scanner.next();\n    }\n}\n\nfunction startsWith(code) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n        this.error(NAME[code] + ' is expected');\n    }\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange() {\n    var hexLength = 0;\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (this.scanner.isDelim(PLUSSIGN)) {\n        this.scanner.next();\n\n        if (this.scanner.tokenType === IDENT) {\n            hexLength = eatHexSequence.call(this, 0, true);\n            if (hexLength > 0) {\n                eatQuestionMarkSequence.call(this, 6 - hexLength);\n            }\n            return;\n        }\n\n        if (this.scanner.isDelim(QUESTIONMARK)) {\n            this.scanner.next();\n            eatQuestionMarkSequence.call(this, 5);\n            return;\n        }\n\n        this.error('Hex digit or question mark is expected');\n        return;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (this.scanner.tokenType === NUMBER) {\n        startsWith.call(this, PLUSSIGN);\n        hexLength = eatHexSequence.call(this, 1, true);\n\n        if (this.scanner.isDelim(QUESTIONMARK)) {\n            eatQuestionMarkSequence.call(this, 6 - hexLength);\n            return;\n        }\n\n        if (this.scanner.tokenType === DIMENSION ||\n            this.scanner.tokenType === NUMBER) {\n            startsWith.call(this, HYPHENMINUS);\n            eatHexSequence.call(this, 1, false);\n            return;\n        }\n\n        return;\n    }\n\n    // u <dimension-token> '?'*\n    if (this.scanner.tokenType === DIMENSION) {\n        startsWith.call(this, PLUSSIGN);\n        hexLength = eatHexSequence.call(this, 1, true);\n\n        if (hexLength > 0) {\n            eatQuestionMarkSequence.call(this, 6 - hexLength);\n        }\n\n        return;\n    }\n\n    this.error();\n}\n\nmodule.exports = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        // U or u\n        if (!cmpChar(this.scanner.source, start, U)) {\n            this.error('U is expected');\n        }\n\n        if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {\n            this.error('Plus sign is expected');\n        }\n\n        this.scanner.next();\n        scanUnicodeRange.call(this);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}