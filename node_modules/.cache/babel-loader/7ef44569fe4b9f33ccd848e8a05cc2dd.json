{"ast":null,"code":"import _slicedToArray from\"/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{useSelector}from'react-redux';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from'recharts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Charts=function Charts(props){var bills=useSelector(function(state){return state.bills.data;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),design=_useState2[0],setDesign=_useState2[1];useEffect(function(){var result=bills.slice(-8).reverse().map(function(ele){return{date:ele.date.slice(0,10),total:ele.total};});var output=result.reduce(function(accumulator,cur){var date=cur.date;var found=accumulator.find(function(elem){return elem.date===date;});if(found)found.total+=cur.total;else accumulator.push(cur);return accumulator;},[]);setDesign(output);},[bills]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(ResponsiveContainer,{width:'100%',height:400,children:/*#__PURE__*/_jsxs(LineChart,{data:design,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{dataKey:\"total\",fill:\"#82ca9d\"})]})})});};export default Charts;","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/src/Components/Charts.js"],"names":["React","useState","useEffect","useSelector","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Charts","props","bills","state","data","design","setDesign","result","slice","reverse","map","ele","date","total","output","reduce","accumulator","cur","found","find","elem","push"],"mappings":"yIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OACIC,SADJ,CACeC,IADf,CACqBC,KADrB,CAC4BC,KAD5B,CACmCC,aADnC,CACkDC,OADlD,CAC2DC,MAD3D,CACmEC,mBADnE,KAEO,UAFP,C,6IAGA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,CAAI,CACpB,GAAMC,CAAAA,KAAK,CAAGX,WAAW,CAAC,SAAAY,KAAK,QAAEA,CAAAA,KAAK,CAACD,KAAN,CAAYE,IAAd,EAAN,CAAzB,CAEA,cAA4Bf,QAAQ,CAAC,EAAD,CAApC,wCAAOgB,MAAP,eAAeC,SAAf,eAEAhB,SAAS,CAAC,UAAM,CACZ,GAAMiB,CAAAA,MAAM,CAAGL,KAAK,CAACM,KAAN,CAAY,CAAC,CAAb,EAAgBC,OAAhB,GAA0BC,GAA1B,CAA8B,SAACC,GAAD,CAAS,CAClD,MAAO,CAAEC,IAAI,CAAED,GAAG,CAACC,IAAJ,CAASJ,KAAT,CAAe,CAAf,CAAkB,EAAlB,CAAR,CAA+BK,KAAK,CAAEF,GAAG,CAACE,KAA1C,CAAP,CACH,CAFc,CAAf,CAIA,GAAMC,CAAAA,MAAM,CAAGP,MAAM,CAACQ,MAAP,CAAc,SAACC,WAAD,CAAcC,GAAd,CAAsB,CAC/C,GAAIL,CAAAA,IAAI,CAAGK,GAAG,CAACL,IAAf,CACA,GAAIM,CAAAA,KAAK,CAAGF,WAAW,CAACG,IAAZ,CAAiB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACR,IAAL,GAAcA,IAAlB,EAArB,CAAZ,CACA,GAAIM,KAAJ,CAAWA,KAAK,CAACL,KAAN,EAAeI,GAAG,CAACJ,KAAnB,CAAX,IACKG,CAAAA,WAAW,CAACK,IAAZ,CAAiBJ,GAAjB,EACL,MAAOD,CAAAA,WAAP,CACH,CANc,CAMZ,EANY,CAAf,CAQAV,SAAS,CAACQ,MAAD,CAAT,CACH,CAdQ,CAcN,CAACZ,KAAD,CAdM,CAAT,CAgBA,mBACI,sCACI,KAAC,mBAAD,EAAqB,KAAK,CAAE,MAA5B,CAAoC,MAAM,CAAE,GAA5C,uBACI,MAAC,SAAD,EAAW,IAAI,CAAEG,MAAjB,wBACI,KAAC,aAAD,EAAe,eAAe,CAAC,KAA/B,EADJ,cAEI,KAAC,KAAD,EAAO,OAAO,CAAC,MAAf,EAFJ,cAGI,KAAC,KAAD,IAHJ,cAII,KAAC,OAAD,IAJJ,cAKI,KAAC,MAAD,IALJ,cAMI,KAAC,IAAD,EAAM,OAAO,CAAC,OAAd,CAAsB,IAAI,CAAC,SAA3B,EANJ,GADJ,EADJ,EADJ,CAcH,CAnCD,CAoCA,cAAeL,CAAAA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nconst Charts = props => {\n    const bills = useSelector(state=>state.bills.data)\n\n    const [design, setDesign] = useState([])\n\n    useEffect(() => {\n        const result = bills.slice(-8).reverse().map((ele) => {\n            return { date: ele.date.slice(0, 10), total: ele.total }\n        })\n\n        const output = result.reduce((accumulator, cur) => {\n            let date = cur.date;\n            let found = accumulator.find(elem => elem.date === date)\n            if (found) found.total += cur.total;\n            else accumulator.push(cur);\n            return accumulator;\n        }, []);\n\n        setDesign(output)\n    }, [bills])\n\n    return (\n        <>\n            <ResponsiveContainer width={'100%'} height={400}>\n                <LineChart data={design}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line dataKey=\"total\" fill=\"#82ca9d\" />\n                </LineChart>\n            </ResponsiveContainer>\n        </>\n    )\n}\nexport default Charts"]},"metadata":{},"sourceType":"module"}