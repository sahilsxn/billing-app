{"ast":null,"code":"var SyntaxReferenceError = require('./error').SyntaxReferenceError;\n\nvar SyntaxMatchError = require('./error').SyntaxMatchError;\n\nvar names = require('../utils/names');\n\nvar generic = require('./generic');\n\nvar parse = require('../definition-syntax/parse');\n\nvar generate = require('../definition-syntax/generate');\n\nvar walk = require('../definition-syntax/walk');\n\nvar prepareTokens = require('./prepare-tokens');\n\nvar buildMatchGraph = require('./match-graph').buildMatchGraph;\n\nvar matchAsTree = require('./match').matchAsTree;\n\nvar trace = require('./trace');\n\nvar search = require('./search');\n\nvar getStructureFromConfig = require('./structure').getStructureFromConfig;\n\nvar cssWideKeywords = buildMatchGraph('inherit | initial | unset');\nvar cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\nfunction dumpMapSyntax(map, compact, syntaxAsAst) {\n  var result = {};\n\n  for (var name in map) {\n    if (map[name].syntax) {\n      result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, {\n        compact: compact\n      });\n    }\n  }\n\n  return result;\n}\n\nfunction dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n  const result = {};\n\n  for (const [name, atrule] of Object.entries(map)) {\n    result[name] = {\n      prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : generate(atrule.prelude.syntax, {\n        compact\n      })),\n      descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n    };\n  }\n\n  return result;\n}\n\nfunction valueHasVar(tokens) {\n  for (var i = 0; i < tokens.length; i++) {\n    if (tokens[i].value.toLowerCase() === 'var(') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction buildMatchResult(match, error, iterations) {\n  return {\n    matched: match,\n    iterations: iterations,\n    error: error,\n    getTrace: trace.getTrace,\n    isType: trace.isType,\n    isProperty: trace.isProperty,\n    isKeyword: trace.isKeyword\n  };\n}\n\nfunction matchSyntax(lexer, syntax, value, useCommon) {\n  var tokens = prepareTokens(value, lexer.syntax);\n  var result;\n\n  if (valueHasVar(tokens)) {\n    return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n  }\n\n  if (useCommon) {\n    result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n  }\n\n  if (!useCommon || !result.match) {\n    result = matchAsTree(tokens, syntax.match, lexer);\n\n    if (!result.match) {\n      return buildMatchResult(null, new SyntaxMatchError(result.reason, syntax.syntax, value, result), result.iterations);\n    }\n  }\n\n  return buildMatchResult(result.match, null, result.iterations);\n}\n\nvar Lexer = function (config, syntax, structure) {\n  this.valueCommonSyntax = cssWideKeywords;\n  this.syntax = syntax;\n  this.generic = false;\n  this.atrules = {};\n  this.properties = {};\n  this.types = {};\n  this.structure = structure || getStructureFromConfig(config);\n\n  if (config) {\n    if (config.types) {\n      for (var name in config.types) {\n        this.addType_(name, config.types[name]);\n      }\n    }\n\n    if (config.generic) {\n      this.generic = true;\n\n      for (var name in generic) {\n        this.addType_(name, generic[name]);\n      }\n    }\n\n    if (config.atrules) {\n      for (var name in config.atrules) {\n        this.addAtrule_(name, config.atrules[name]);\n      }\n    }\n\n    if (config.properties) {\n      for (var name in config.properties) {\n        this.addProperty_(name, config.properties[name]);\n      }\n    }\n  }\n};\n\nLexer.prototype = {\n  structure: {},\n  checkStructure: function (ast) {\n    function collectWarning(node, message) {\n      warns.push({\n        node: node,\n        message: message\n      });\n    }\n\n    var structure = this.structure;\n    var warns = [];\n    this.syntax.walk(ast, function (node) {\n      if (structure.hasOwnProperty(node.type)) {\n        structure[node.type].check(node, collectWarning);\n      } else {\n        collectWarning(node, 'Unknown node type `' + node.type + '`');\n      }\n    });\n    return warns.length ? warns : false;\n  },\n  createDescriptor: function (syntax, type, name) {\n    let parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var ref = {\n      type: type,\n      name: name\n    };\n    var descriptor = {\n      type: type,\n      name: name,\n      parent: parent,\n      syntax: null,\n      match: null\n    };\n\n    if (typeof syntax === 'function') {\n      descriptor.match = buildMatchGraph(syntax, ref);\n    } else {\n      if (typeof syntax === 'string') {\n        // lazy parsing on first access\n        Object.defineProperty(descriptor, 'syntax', {\n          get: function () {\n            Object.defineProperty(descriptor, 'syntax', {\n              value: parse(syntax)\n            });\n            return descriptor.syntax;\n          }\n        });\n      } else {\n        descriptor.syntax = syntax;\n      } // lazy graph build on first access\n\n\n      Object.defineProperty(descriptor, 'match', {\n        get: function () {\n          Object.defineProperty(descriptor, 'match', {\n            value: buildMatchGraph(descriptor.syntax, ref)\n          });\n          return descriptor.match;\n        }\n      });\n    }\n\n    return descriptor;\n  },\n  addAtrule_: function (name, syntax) {\n    if (!syntax) {\n      return;\n    }\n\n    this.atrules[name] = {\n      type: 'Atrule',\n      name: name,\n      prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n      descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce((res, descName) => {\n        res[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n        return res;\n      }, {}) : null\n    };\n  },\n  addProperty_: function (name, syntax) {\n    if (!syntax) {\n      return;\n    }\n\n    this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n  },\n  addType_: function (name, syntax) {\n    if (!syntax) {\n      return;\n    }\n\n    this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n    if (syntax === generic['-ms-legacy-expression']) {\n      this.valueCommonSyntax = cssWideKeywordsWithExpression;\n    }\n  },\n  checkAtruleName: function (atruleName) {\n    if (!this.getAtrule(atruleName)) {\n      return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);\n    }\n  },\n  checkAtrulePrelude: function (atruleName, prelude) {\n    let error = this.checkAtruleName(atruleName);\n\n    if (error) {\n      return error;\n    }\n\n    var atrule = this.getAtrule(atruleName);\n\n    if (!atrule.prelude && prelude) {\n      return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n    }\n\n    if (atrule.prelude && !prelude) {\n      return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n    }\n  },\n  checkAtruleDescriptorName: function (atruleName, descriptorName) {\n    let error = this.checkAtruleName(atruleName);\n\n    if (error) {\n      return error;\n    }\n\n    var atrule = this.getAtrule(atruleName);\n    var descriptor = names.keyword(descriptorName);\n\n    if (!atrule.descriptors) {\n      return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n    }\n\n    if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {\n      return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);\n    }\n  },\n  checkPropertyName: function (propertyName) {\n    var property = names.property(propertyName); // don't match syntax for a custom property\n\n    if (property.custom) {\n      return new Error('Lexer matching doesn\\'t applicable for custom properties');\n    }\n\n    if (!this.getProperty(propertyName)) {\n      return new SyntaxReferenceError('Unknown property', propertyName);\n    }\n  },\n  matchAtrulePrelude: function (atruleName, prelude) {\n    var error = this.checkAtrulePrelude(atruleName, prelude);\n\n    if (error) {\n      return buildMatchResult(null, error);\n    }\n\n    if (!prelude) {\n      return buildMatchResult(null, null);\n    }\n\n    return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);\n  },\n  matchAtruleDescriptor: function (atruleName, descriptorName, value) {\n    var error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n\n    if (error) {\n      return buildMatchResult(null, error);\n    }\n\n    var atrule = this.getAtrule(atruleName);\n    var descriptor = names.keyword(descriptorName);\n    return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n  },\n  matchDeclaration: function (node) {\n    if (node.type !== 'Declaration') {\n      return buildMatchResult(null, new Error('Not a Declaration node'));\n    }\n\n    return this.matchProperty(node.property, node.value);\n  },\n  matchProperty: function (propertyName, value) {\n    var error = this.checkPropertyName(propertyName);\n\n    if (error) {\n      return buildMatchResult(null, error);\n    }\n\n    return matchSyntax(this, this.getProperty(propertyName), value, true);\n  },\n  matchType: function (typeName, value) {\n    var typeSyntax = this.getType(typeName);\n\n    if (!typeSyntax) {\n      return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n    }\n\n    return matchSyntax(this, typeSyntax, value, false);\n  },\n  match: function (syntax, value) {\n    if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n      return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n    }\n\n    if (typeof syntax === 'string' || !syntax.match) {\n      syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n    }\n\n    return matchSyntax(this, syntax, value, false);\n  },\n  findValueFragments: function (propertyName, value, type, name) {\n    return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n  },\n  findDeclarationValueFragments: function (declaration, type, name) {\n    return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n  },\n  findAllFragments: function (ast, type, name) {\n    var result = [];\n    this.syntax.walk(ast, {\n      visit: 'Declaration',\n      enter: function (declaration) {\n        result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n      }.bind(this)\n    });\n    return result;\n  },\n  getAtrule: function (atruleName) {\n    let fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var atrule = names.keyword(atruleName);\n    var atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n    return atruleEntry || null;\n  },\n  getAtrulePrelude: function (atruleName) {\n    let fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const atrule = this.getAtrule(atruleName, fallbackBasename);\n    return atrule && atrule.prelude || null;\n  },\n  getAtruleDescriptor: function (atruleName, name) {\n    return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n  },\n  getProperty: function (propertyName) {\n    let fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var property = names.property(propertyName);\n    var propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];\n    return propertyEntry || null;\n  },\n  getType: function (name) {\n    return this.types.hasOwnProperty(name) ? this.types[name] : null;\n  },\n  validate: function () {\n    function validate(syntax, name, broken, descriptor) {\n      if (broken.hasOwnProperty(name)) {\n        return broken[name];\n      }\n\n      broken[name] = false;\n\n      if (descriptor.syntax !== null) {\n        walk(descriptor.syntax, function (node) {\n          if (node.type !== 'Type' && node.type !== 'Property') {\n            return;\n          }\n\n          var map = node.type === 'Type' ? syntax.types : syntax.properties;\n          var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n          if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n            broken[name] = true;\n          }\n        }, this);\n      }\n    }\n\n    var brokenTypes = {};\n    var brokenProperties = {};\n\n    for (var key in this.types) {\n      validate(this, key, brokenTypes, this.types[key]);\n    }\n\n    for (var key in this.properties) {\n      validate(this, key, brokenProperties, this.properties[key]);\n    }\n\n    brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n      return brokenTypes[name];\n    });\n    brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n      return brokenProperties[name];\n    });\n\n    if (brokenTypes.length || brokenProperties.length) {\n      return {\n        types: brokenTypes,\n        properties: brokenProperties\n      };\n    }\n\n    return null;\n  },\n  dump: function (syntaxAsAst, pretty) {\n    return {\n      generic: this.generic,\n      types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n      properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n      atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n    };\n  },\n  toString: function () {\n    return JSON.stringify(this.dump());\n  }\n};\nmodule.exports = Lexer;","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/lexer/Lexer.js"],"names":["SyntaxReferenceError","require","SyntaxMatchError","names","generic","parse","generate","walk","prepareTokens","buildMatchGraph","matchAsTree","trace","search","getStructureFromConfig","cssWideKeywords","cssWideKeywordsWithExpression","dumpMapSyntax","map","compact","syntaxAsAst","result","name","syntax","dumpAtruleMapSyntax","atrule","Object","entries","prelude","descriptors","valueHasVar","tokens","i","length","value","toLowerCase","buildMatchResult","match","error","iterations","matched","getTrace","isType","isProperty","isKeyword","matchSyntax","lexer","useCommon","Error","valueCommonSyntax","reason","Lexer","config","structure","atrules","properties","types","addType_","addAtrule_","addProperty_","prototype","checkStructure","ast","collectWarning","node","message","warns","push","hasOwnProperty","type","check","createDescriptor","parent","ref","descriptor","defineProperty","get","keys","reduce","res","descName","checkAtruleName","atruleName","getAtrule","checkAtrulePrelude","SyntaxError","checkAtruleDescriptorName","descriptorName","keyword","basename","checkPropertyName","propertyName","property","custom","getProperty","matchAtrulePrelude","matchAtruleDescriptor","matchDeclaration","matchProperty","matchType","typeName","typeSyntax","getType","findValueFragments","matchFragments","findDeclarationValueFragments","declaration","findAllFragments","visit","enter","apply","bind","fallbackBasename","atruleEntry","vendor","getAtrulePrelude","getAtruleDescriptor","declarators","propertyEntry","validate","broken","brokenMap","brokenTypes","brokenProperties","key","filter","dump","pretty","toString","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["var SyntaxReferenceError = require('./error').SyntaxReferenceError;\nvar SyntaxMatchError = require('./error').SyntaxMatchError;\nvar names = require('../utils/names');\nvar generic = require('./generic');\nvar parse = require('../definition-syntax/parse');\nvar generate = require('../definition-syntax/generate');\nvar walk = require('../definition-syntax/walk');\nvar prepareTokens = require('./prepare-tokens');\nvar buildMatchGraph = require('./match-graph').buildMatchGraph;\nvar matchAsTree = require('./match').matchAsTree;\nvar trace = require('./trace');\nvar search = require('./search');\nvar getStructureFromConfig = require('./structure').getStructureFromConfig;\nvar cssWideKeywords = buildMatchGraph('inherit | initial | unset');\nvar cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\nfunction dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n        if (map[name].syntax) {\n            result[name] = syntaxAsAst\n                ? map[name].syntax\n                : generate(map[name].syntax, { compact: compact });\n        }\n    }\n\n    return result;\n}\n\nfunction dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n    const result = {};\n\n    for (const [name, atrule] of Object.entries(map)) {\n        result[name] = {\n            prelude: atrule.prelude && (\n                syntaxAsAst\n                    ? atrule.prelude.syntax\n                    : generate(atrule.prelude.syntax, { compact })\n            ),\n            descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n        };\n    }\n\n    return result;\n}\n\nfunction valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n        if (tokens[i].value.toLowerCase() === 'var(') {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction buildMatchResult(match, error, iterations) {\n    return {\n        matched: match,\n        iterations: iterations,\n        error: error,\n        getTrace: trace.getTrace,\n        isType: trace.isType,\n        isProperty: trace.isProperty,\n        isKeyword: trace.isKeyword\n    };\n}\n\nfunction matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = prepareTokens(value, lexer.syntax);\n    var result;\n\n    if (valueHasVar(tokens)) {\n        return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n        result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n\n    if (!useCommon || !result.match) {\n        result = matchAsTree(tokens, syntax.match, lexer);\n        if (!result.match) {\n            return buildMatchResult(\n                null,\n                new SyntaxMatchError(result.reason, syntax.syntax, value, result),\n                result.iterations\n            );\n        }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n}\n\nvar Lexer = function(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = {};\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n\n    if (config) {\n        if (config.types) {\n            for (var name in config.types) {\n                this.addType_(name, config.types[name]);\n            }\n        }\n\n        if (config.generic) {\n            this.generic = true;\n            for (var name in generic) {\n                this.addType_(name, generic[name]);\n            }\n        }\n\n        if (config.atrules) {\n            for (var name in config.atrules) {\n                this.addAtrule_(name, config.atrules[name]);\n            }\n        }\n\n        if (config.properties) {\n            for (var name in config.properties) {\n                this.addProperty_(name, config.properties[name]);\n            }\n        }\n    }\n};\n\nLexer.prototype = {\n    structure: {},\n    checkStructure: function(ast) {\n        function collectWarning(node, message) {\n            warns.push({\n                node: node,\n                message: message\n            });\n        }\n\n        var structure = this.structure;\n        var warns = [];\n\n        this.syntax.walk(ast, function(node) {\n            if (structure.hasOwnProperty(node.type)) {\n                structure[node.type].check(node, collectWarning);\n            } else {\n                collectWarning(node, 'Unknown node type `' + node.type + '`');\n            }\n        });\n\n        return warns.length ? warns : false;\n    },\n\n    createDescriptor: function(syntax, type, name, parent = null) {\n        var ref = {\n            type: type,\n            name: name\n        };\n        var descriptor = {\n            type: type,\n            name: name,\n            parent: parent,\n            syntax: null,\n            match: null\n        };\n\n        if (typeof syntax === 'function') {\n            descriptor.match = buildMatchGraph(syntax, ref);\n        } else {\n            if (typeof syntax === 'string') {\n                // lazy parsing on first access\n                Object.defineProperty(descriptor, 'syntax', {\n                    get: function() {\n                        Object.defineProperty(descriptor, 'syntax', {\n                            value: parse(syntax)\n                        });\n\n                        return descriptor.syntax;\n                    }\n                });\n            } else {\n                descriptor.syntax = syntax;\n            }\n\n            // lazy graph build on first access\n            Object.defineProperty(descriptor, 'match', {\n                get: function() {\n                    Object.defineProperty(descriptor, 'match', {\n                        value: buildMatchGraph(descriptor.syntax, ref)\n                    });\n\n                    return descriptor.match;\n                }\n            });\n        }\n\n        return descriptor;\n    },\n    addAtrule_: function(name, syntax) {\n        if (!syntax) {\n            return;\n        }\n\n        this.atrules[name] = {\n            type: 'Atrule',\n            name: name,\n            prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n            descriptors: syntax.descriptors\n                ? Object.keys(syntax.descriptors).reduce((res, descName) => {\n                    res[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n                    return res;\n                }, {})\n                : null\n        };\n    },\n    addProperty_: function(name, syntax) {\n        if (!syntax) {\n            return;\n        }\n\n        this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function(name, syntax) {\n        if (!syntax) {\n            return;\n        }\n\n        this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n        if (syntax === generic['-ms-legacy-expression']) {\n            this.valueCommonSyntax = cssWideKeywordsWithExpression;\n        }\n    },\n\n    checkAtruleName: function(atruleName) {\n        if (!this.getAtrule(atruleName)) {\n            return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);\n        }\n    },\n    checkAtrulePrelude: function(atruleName, prelude) {\n        let error = this.checkAtruleName(atruleName);\n\n        if (error) {\n            return error;\n        }\n\n        var atrule = this.getAtrule(atruleName);\n\n        if (!atrule.prelude && prelude) {\n            return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n        }\n\n        if (atrule.prelude && !prelude) {\n            return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n        }\n    },\n    checkAtruleDescriptorName: function(atruleName, descriptorName) {\n        let error = this.checkAtruleName(atruleName);\n\n        if (error) {\n            return error;\n        }\n\n        var atrule = this.getAtrule(atruleName);\n        var descriptor = names.keyword(descriptorName);\n\n        if (!atrule.descriptors) {\n            return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n        }\n\n        if (!atrule.descriptors[descriptor.name] &&\n            !atrule.descriptors[descriptor.basename]) {\n            return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);\n        }\n    },\n    checkPropertyName: function(propertyName) {\n        var property = names.property(propertyName);\n\n        // don't match syntax for a custom property\n        if (property.custom) {\n            return new Error('Lexer matching doesn\\'t applicable for custom properties');\n        }\n\n        if (!this.getProperty(propertyName)) {\n            return new SyntaxReferenceError('Unknown property', propertyName);\n        }\n    },\n\n    matchAtrulePrelude: function(atruleName, prelude) {\n        var error = this.checkAtrulePrelude(atruleName, prelude);\n\n        if (error) {\n            return buildMatchResult(null, error);\n        }\n\n        if (!prelude) {\n            return buildMatchResult(null, null);\n        }\n\n        return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);\n    },\n    matchAtruleDescriptor: function(atruleName, descriptorName, value) {\n        var error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n\n        if (error) {\n            return buildMatchResult(null, error);\n        }\n\n        var atrule = this.getAtrule(atruleName);\n        var descriptor = names.keyword(descriptorName);\n\n        return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n    },\n    matchDeclaration: function(node) {\n        if (node.type !== 'Declaration') {\n            return buildMatchResult(null, new Error('Not a Declaration node'));\n        }\n\n        return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function(propertyName, value) {\n        var error = this.checkPropertyName(propertyName);\n\n        if (error) {\n            return buildMatchResult(null, error);\n        }\n\n        return matchSyntax(this, this.getProperty(propertyName), value, true);\n    },\n    matchType: function(typeName, value) {\n        var typeSyntax = this.getType(typeName);\n\n        if (!typeSyntax) {\n            return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n        }\n\n        return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function(syntax, value) {\n        if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n            return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n        }\n\n        if (typeof syntax === 'string' || !syntax.match) {\n            syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n        }\n\n        return matchSyntax(this, syntax, value, false);\n    },\n\n    findValueFragments: function(propertyName, value, type, name) {\n        return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function(declaration, type, name) {\n        return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function(ast, type, name) {\n        var result = [];\n\n        this.syntax.walk(ast, {\n            visit: 'Declaration',\n            enter: function(declaration) {\n                result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n            }.bind(this)\n        });\n\n        return result;\n    },\n\n    getAtrule: function(atruleName, fallbackBasename = true) {\n        var atrule = names.keyword(atruleName);\n        var atruleEntry = atrule.vendor && fallbackBasename\n            ? this.atrules[atrule.name] || this.atrules[atrule.basename]\n            : this.atrules[atrule.name];\n\n        return atruleEntry || null;\n    },\n    getAtrulePrelude: function(atruleName, fallbackBasename = true) {\n        const atrule = this.getAtrule(atruleName, fallbackBasename);\n\n        return atrule && atrule.prelude || null;\n    },\n    getAtruleDescriptor: function(atruleName, name) {\n        return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators\n            ? this.atrules[atruleName].declarators[name] || null\n            : null;\n    },\n    getProperty: function(propertyName, fallbackBasename = true) {\n        var property = names.property(propertyName);\n        var propertyEntry = property.vendor && fallbackBasename\n            ? this.properties[property.name] || this.properties[property.basename]\n            : this.properties[property.name];\n\n        return propertyEntry || null;\n    },\n    getType: function(name) {\n        return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n\n    validate: function() {\n        function validate(syntax, name, broken, descriptor) {\n            if (broken.hasOwnProperty(name)) {\n                return broken[name];\n            }\n\n            broken[name] = false;\n            if (descriptor.syntax !== null) {\n                walk(descriptor.syntax, function(node) {\n                    if (node.type !== 'Type' && node.type !== 'Property') {\n                        return;\n                    }\n\n                    var map = node.type === 'Type' ? syntax.types : syntax.properties;\n                    var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n                    if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n                        broken[name] = true;\n                    }\n                }, this);\n            }\n        }\n\n        var brokenTypes = {};\n        var brokenProperties = {};\n\n        for (var key in this.types) {\n            validate(this, key, brokenTypes, this.types[key]);\n        }\n\n        for (var key in this.properties) {\n            validate(this, key, brokenProperties, this.properties[key]);\n        }\n\n        brokenTypes = Object.keys(brokenTypes).filter(function(name) {\n            return brokenTypes[name];\n        });\n        brokenProperties = Object.keys(brokenProperties).filter(function(name) {\n            return brokenProperties[name];\n        });\n\n        if (brokenTypes.length || brokenProperties.length) {\n            return {\n                types: brokenTypes,\n                properties: brokenProperties\n            };\n        }\n\n        return null;\n    },\n    dump: function(syntaxAsAst, pretty) {\n        return {\n            generic: this.generic,\n            types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n            properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n            atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n        };\n    },\n    toString: function() {\n        return JSON.stringify(this.dump());\n    }\n};\n\nmodule.exports = Lexer;\n"]},"metadata":{},"sourceType":"script"}