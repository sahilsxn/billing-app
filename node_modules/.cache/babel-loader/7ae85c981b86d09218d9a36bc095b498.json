{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n// '.' ident\n\nmodule.exports = {\n  name: 'ClassSelector',\n  structure: {\n    name: String\n  },\n  parse: function () {\n    if (!this.scanner.isDelim(FULLSTOP)) {\n      this.error('Full stop is expected');\n    }\n\n    this.scanner.next();\n    return {\n      type: 'ClassSelector',\n      loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n      name: this.consume(IDENT)\n    };\n  },\n  generate: function (node) {\n    this.chunk('.');\n    this.chunk(node.name);\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/ClassSelector.js"],"names":["TYPE","require","IDENT","Ident","FULLSTOP","module","exports","name","structure","String","parse","scanner","isDelim","error","next","type","loc","getLocation","tokenStart","tokenEnd","consume","generate","node","chunk"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AAEA,IAAIE,KAAK,GAAGF,IAAI,CAACG,KAAjB;AACA,IAAIC,QAAQ,GAAG,MAAf,C,CAAuB;AAEvB;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,eADO;AAEbC,EAAAA,SAAS,EAAE;AACPD,IAAAA,IAAI,EAAEE;AADC,GAFE;AAKbC,EAAAA,KAAK,EAAE,YAAW;AACd,QAAI,CAAC,KAAKC,OAAL,CAAaC,OAAb,CAAqBR,QAArB,CAAL,EAAqC;AACjC,WAAKS,KAAL,CAAW,uBAAX;AACH;;AAED,SAAKF,OAAL,CAAaG,IAAb;AAEA,WAAO;AACHC,MAAAA,IAAI,EAAE,eADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,WAAL,CAAiB,KAAKN,OAAL,CAAaO,UAAb,GAA0B,CAA3C,EAA8C,KAAKP,OAAL,CAAaQ,QAA3D,CAFF;AAGHZ,MAAAA,IAAI,EAAE,KAAKa,OAAL,CAAalB,KAAb;AAHH,KAAP;AAKH,GAjBY;AAkBbmB,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKC,KAAL,CAAW,GAAX;AACA,SAAKA,KAAL,CAAWD,IAAI,CAACf,IAAhB;AACH;AArBY,CAAjB","sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// '.' ident\nmodule.exports = {\n    name: 'ClassSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        if (!this.scanner.isDelim(FULLSTOP)) {\n            this.error('Full stop is expected');\n        }\n\n        this.scanner.next();\n\n        return {\n            type: 'ClassSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.consume(IDENT)\n        };\n    },\n    generate: function(node) {\n        this.chunk('.');\n        this.chunk(node.name);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}