{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar COLON = TYPE.Colon;\nvar DELIM = TYPE.Delim;\nmodule.exports = {\n  name: 'MediaFeature',\n  structure: {\n    name: String,\n    value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n    var name;\n    var value = null;\n    this.eat(LEFTPARENTHESIS);\n    this.scanner.skipSC();\n    name = this.consume(IDENT);\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType !== RIGHTPARENTHESIS) {\n      this.eat(COLON);\n      this.scanner.skipSC();\n\n      switch (this.scanner.tokenType) {\n        case NUMBER:\n          if (this.lookupNonWSType(1) === DELIM) {\n            value = this.Ratio();\n          } else {\n            value = this.Number();\n          }\n\n          break;\n\n        case DIMENSION:\n          value = this.Dimension();\n          break;\n\n        case IDENT:\n          value = this.Identifier();\n          break;\n\n        default:\n          this.error('Number, dimension, ratio or identifier is expected');\n      }\n\n      this.scanner.skipSC();\n    }\n\n    this.eat(RIGHTPARENTHESIS);\n    return {\n      type: 'MediaFeature',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      value: value\n    };\n  },\n  generate: function (node) {\n    this.chunk('(');\n    this.chunk(node.name);\n\n    if (node.value !== null) {\n      this.chunk(':');\n      this.node(node.value);\n    }\n\n    this.chunk(')');\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/MediaFeature.js"],"names":["TYPE","require","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","LEFTPARENTHESIS","LeftParenthesis","RIGHTPARENTHESIS","RightParenthesis","COLON","Colon","DELIM","Delim","module","exports","name","structure","String","value","parse","start","scanner","tokenStart","eat","skipSC","consume","tokenType","lookupNonWSType","Ratio","Identifier","error","type","loc","getLocation","generate","node","chunk"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AAEA,IAAIE,KAAK,GAAGF,IAAI,CAACG,KAAjB;AACA,IAAIC,MAAM,GAAGJ,IAAI,CAACK,MAAlB;AACA,IAAIC,SAAS,GAAGN,IAAI,CAACO,SAArB;AACA,IAAIC,eAAe,GAAGR,IAAI,CAACS,eAA3B;AACA,IAAIC,gBAAgB,GAAGV,IAAI,CAACW,gBAA5B;AACA,IAAIC,KAAK,GAAGZ,IAAI,CAACa,KAAjB;AACA,IAAIC,KAAK,GAAGd,IAAI,CAACe,KAAjB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,cADO;AAEbC,EAAAA,SAAS,EAAE;AACPD,IAAAA,IAAI,EAAEE,MADC;AAEPC,IAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,QAAf,EAAyB,WAAzB,EAAsC,OAAtC,EAA+C,IAA/C;AAFA,GAFE;AAMbC,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,KAAK,GAAG,KAAKC,OAAL,CAAaC,UAAzB;AACA,QAAIP,IAAJ;AACA,QAAIG,KAAK,GAAG,IAAZ;AAEA,SAAKK,GAAL,CAASlB,eAAT;AACA,SAAKgB,OAAL,CAAaG,MAAb;AAEAT,IAAAA,IAAI,GAAG,KAAKU,OAAL,CAAa1B,KAAb,CAAP;AACA,SAAKsB,OAAL,CAAaG,MAAb;;AAEA,QAAI,KAAKH,OAAL,CAAaK,SAAb,KAA2BnB,gBAA/B,EAAiD;AAC7C,WAAKgB,GAAL,CAASd,KAAT;AACA,WAAKY,OAAL,CAAaG,MAAb;;AAEA,cAAQ,KAAKH,OAAL,CAAaK,SAArB;AACI,aAAKzB,MAAL;AACI,cAAI,KAAK0B,eAAL,CAAqB,CAArB,MAA4BhB,KAAhC,EAAuC;AACnCO,YAAAA,KAAK,GAAG,KAAKU,KAAL,EAAR;AACH,WAFD,MAEO;AACHV,YAAAA,KAAK,GAAG,KAAKhB,MAAL,EAAR;AACH;;AAED;;AAEJ,aAAKC,SAAL;AACIe,UAAAA,KAAK,GAAG,KAAKd,SAAL,EAAR;AACA;;AAEJ,aAAKL,KAAL;AACImB,UAAAA,KAAK,GAAG,KAAKW,UAAL,EAAR;AAEA;;AAEJ;AACI,eAAKC,KAAL,CAAW,oDAAX;AApBR;;AAuBA,WAAKT,OAAL,CAAaG,MAAb;AACH;;AAED,SAAKD,GAAL,CAAShB,gBAAT;AAEA,WAAO;AACHwB,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,WAAL,CAAiBb,KAAjB,EAAwB,KAAKC,OAAL,CAAaC,UAArC,CAFF;AAGHP,MAAAA,IAAI,EAAEA,IAHH;AAIHG,MAAAA,KAAK,EAAEA;AAJJ,KAAP;AAMH,GAvDY;AAwDbgB,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKC,KAAL,CAAW,GAAX;AACA,SAAKA,KAAL,CAAWD,IAAI,CAACpB,IAAhB;;AACA,QAAIoB,IAAI,CAACjB,KAAL,KAAe,IAAnB,EAAyB;AACrB,WAAKkB,KAAL,CAAW,GAAX;AACA,WAAKD,IAAL,CAAUA,IAAI,CAACjB,KAAf;AACH;;AACD,SAAKkB,KAAL,CAAW,GAAX;AACH;AAhEY,CAAjB","sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar COLON = TYPE.Colon;\nvar DELIM = TYPE.Delim;\n\nmodule.exports = {\n    name: 'MediaFeature',\n    structure: {\n        name: String,\n        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var value = null;\n\n        this.eat(LEFTPARENTHESIS);\n        this.scanner.skipSC();\n\n        name = this.consume(IDENT);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTPARENTHESIS) {\n            this.eat(COLON);\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case NUMBER:\n                    if (this.lookupNonWSType(1) === DELIM) {\n                        value = this.Ratio();\n                    } else {\n                        value = this.Number();\n                    }\n\n                    break;\n\n                case DIMENSION:\n                    value = this.Dimension();\n                    break;\n\n                case IDENT:\n                    value = this.Identifier();\n\n                    break;\n\n                default:\n                    this.error('Number, dimension, ratio or identifier is expected');\n            }\n\n            this.scanner.skipSC();\n        }\n\n        this.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'MediaFeature',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk('(');\n        this.chunk(node.name);\n        if (node.value !== null) {\n            this.chunk(':');\n            this.node(node.value);\n        }\n        this.chunk(')');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}