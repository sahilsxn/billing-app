{"ast":null,"code":"var isDigit = require('../../tokenizer').isDigit;\n\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar NUMBER = TYPE.Number;\nvar DELIM = TYPE.Delim;\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\n\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\n\nfunction consumeNumber() {\n  this.scanner.skipWS();\n  var value = this.consume(NUMBER);\n\n  for (var i = 0; i < value.length; i++) {\n    var code = value.charCodeAt(i);\n\n    if (!isDigit(code) && code !== FULLSTOP) {\n      this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);\n    }\n  }\n\n  if (Number(value) === 0) {\n    this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);\n  }\n\n  return value;\n} // <positive-integer> S* '/' S* <positive-integer>\n\n\nmodule.exports = {\n  name: 'Ratio',\n  structure: {\n    left: String,\n    right: String\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n    var left = consumeNumber.call(this);\n    var right;\n    this.scanner.skipWS();\n\n    if (!this.scanner.isDelim(SOLIDUS)) {\n      this.error('Solidus is expected');\n    }\n\n    this.eat(DELIM);\n    right = consumeNumber.call(this);\n    return {\n      type: 'Ratio',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      left: left,\n      right: right\n    };\n  },\n  generate: function (node) {\n    this.chunk(node.left);\n    this.chunk('/');\n    this.chunk(node.right);\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/Ratio.js"],"names":["isDigit","require","TYPE","NUMBER","Number","DELIM","Delim","SOLIDUS","FULLSTOP","consumeNumber","scanner","skipWS","value","consume","i","length","code","charCodeAt","error","tokenStart","module","exports","name","structure","left","String","right","parse","start","call","isDelim","eat","type","loc","getLocation","generate","node","chunk"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,OAAzC;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,IAAtC;;AAEA,IAAIC,MAAM,GAAGD,IAAI,CAACE,MAAlB;AACA,IAAIC,KAAK,GAAGH,IAAI,CAACI,KAAjB;AACA,IAAIC,OAAO,GAAG,MAAd,C,CAAuB;;AACvB,IAAIC,QAAQ,GAAG,MAAf,C,CAAuB;AAEvB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAyB;AACrB,OAAKC,OAAL,CAAaC,MAAb;AAEA,MAAIC,KAAK,GAAG,KAAKC,OAAL,CAAaV,MAAb,CAAZ;;AAEA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIE,IAAI,GAAGJ,KAAK,CAACK,UAAN,CAAiBH,CAAjB,CAAX;;AACA,QAAI,CAACd,OAAO,CAACgB,IAAD,CAAR,IAAkBA,IAAI,KAAKR,QAA/B,EAAyC;AACrC,WAAKU,KAAL,CAAW,6BAAX,EAA0C,KAAKR,OAAL,CAAaS,UAAb,GAA0BP,KAAK,CAACG,MAAhC,GAAyCD,CAAnF;AACH;AACJ;;AAED,MAAIV,MAAM,CAACQ,KAAD,CAAN,KAAkB,CAAtB,EAAyB;AACrB,SAAKM,KAAL,CAAW,4BAAX,EAAyC,KAAKR,OAAL,CAAaS,UAAb,GAA0BP,KAAK,CAACG,MAAzE;AACH;;AAED,SAAOH,KAAP;AACH,C,CAED;;;AACAQ,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,OADO;AAEbC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,KAAK,EAAED;AAFA,GAFE;AAMbE,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,KAAK,GAAG,KAAKlB,OAAL,CAAaS,UAAzB;AACA,QAAIK,IAAI,GAAGf,aAAa,CAACoB,IAAd,CAAmB,IAAnB,CAAX;AACA,QAAIH,KAAJ;AAEA,SAAKhB,OAAL,CAAaC,MAAb;;AAEA,QAAI,CAAC,KAAKD,OAAL,CAAaoB,OAAb,CAAqBvB,OAArB,CAAL,EAAoC;AAChC,WAAKW,KAAL,CAAW,qBAAX;AACH;;AACD,SAAKa,GAAL,CAAS1B,KAAT;AACAqB,IAAAA,KAAK,GAAGjB,aAAa,CAACoB,IAAd,CAAmB,IAAnB,CAAR;AAEA,WAAO;AACHG,MAAAA,IAAI,EAAE,OADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,WAAL,CAAiBN,KAAjB,EAAwB,KAAKlB,OAAL,CAAaS,UAArC,CAFF;AAGHK,MAAAA,IAAI,EAAEA,IAHH;AAIHE,MAAAA,KAAK,EAAEA;AAJJ,KAAP;AAMH,GAzBY;AA0BbS,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKC,KAAL,CAAWD,IAAI,CAACZ,IAAhB;AACA,SAAKa,KAAL,CAAW,GAAX;AACA,SAAKA,KAAL,CAAWD,IAAI,CAACV,KAAhB;AACH;AA9BY,CAAjB","sourcesContent":["var isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar NUMBER = TYPE.Number;\nvar DELIM = TYPE.Delim;\nvar SOLIDUS = 0x002F;  // U+002F SOLIDUS (/)\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber() {\n    this.scanner.skipWS();\n\n    var value = this.consume(NUMBER);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isDigit(code) && code !== FULLSTOP) {\n            this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber.call(this);\n        var right;\n\n        this.scanner.skipWS();\n\n        if (!this.scanner.isDelim(SOLIDUS)) {\n            this.error('Solidus is expected');\n        }\n        this.eat(DELIM);\n        right = consumeNumber.call(this);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.left);\n        this.chunk('/');\n        this.chunk(node.right);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}