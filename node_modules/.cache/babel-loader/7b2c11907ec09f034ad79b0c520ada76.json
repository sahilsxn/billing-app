{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\n\nvar GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\n\nvar TILDE = 0x007E; // U+007E TILDE (~)\n// + | > | ~ | /deep/\n\nmodule.exports = {\n  name: 'Combinator',\n  structure: {\n    name: String\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n    var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n    switch (code) {\n      case GREATERTHANSIGN:\n      case PLUSSIGN:\n      case TILDE:\n        this.scanner.next();\n        break;\n\n      case SOLIDUS:\n        this.scanner.next();\n\n        if (this.scanner.tokenType !== IDENT || this.scanner.lookupValue(0, 'deep') === false) {\n          this.error('Identifier `deep` is expected');\n        }\n\n        this.scanner.next();\n\n        if (!this.scanner.isDelim(SOLIDUS)) {\n          this.error('Solidus is expected');\n        }\n\n        this.scanner.next();\n        break;\n\n      default:\n        this.error('Combinator is expected');\n    }\n\n    return {\n      type: 'Combinator',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: this.scanner.substrToCursor(start)\n    };\n  },\n  generate: function (node) {\n    this.chunk(node.name);\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/Combinator.js"],"names":["TYPE","require","IDENT","Ident","PLUSSIGN","SOLIDUS","GREATERTHANSIGN","TILDE","module","exports","name","structure","String","parse","start","scanner","tokenStart","code","source","charCodeAt","next","tokenType","lookupValue","error","isDelim","type","loc","getLocation","substrToCursor","generate","node","chunk"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AAEA,IAAIE,KAAK,GAAGF,IAAI,CAACG,KAAjB;AACA,IAAIC,QAAQ,GAAG,MAAf,C,CAA8B;;AAC9B,IAAIC,OAAO,GAAG,MAAd,C,CAA8B;;AAC9B,IAAIC,eAAe,GAAG,MAAtB,C,CAA8B;;AAC9B,IAAIC,KAAK,GAAG,MAAZ,C,CAA8B;AAE9B;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,YADO;AAEbC,EAAAA,SAAS,EAAE;AACPD,IAAAA,IAAI,EAAEE;AADC,GAFE;AAKbC,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,KAAK,GAAG,KAAKC,OAAL,CAAaC,UAAzB;AACA,QAAIC,IAAI,GAAG,KAAKF,OAAL,CAAaG,MAAb,CAAoBC,UAApB,CAA+B,KAAKJ,OAAL,CAAaC,UAA5C,CAAX;;AAEA,YAAQC,IAAR;AACI,WAAKX,eAAL;AACA,WAAKF,QAAL;AACA,WAAKG,KAAL;AACI,aAAKQ,OAAL,CAAaK,IAAb;AACA;;AAEJ,WAAKf,OAAL;AACI,aAAKU,OAAL,CAAaK,IAAb;;AAEA,YAAI,KAAKL,OAAL,CAAaM,SAAb,KAA2BnB,KAA3B,IAAoC,KAAKa,OAAL,CAAaO,WAAb,CAAyB,CAAzB,EAA4B,MAA5B,MAAwC,KAAhF,EAAuF;AACnF,eAAKC,KAAL,CAAW,+BAAX;AACH;;AAED,aAAKR,OAAL,CAAaK,IAAb;;AAEA,YAAI,CAAC,KAAKL,OAAL,CAAaS,OAAb,CAAqBnB,OAArB,CAAL,EAAoC;AAChC,eAAKkB,KAAL,CAAW,qBAAX;AACH;;AAED,aAAKR,OAAL,CAAaK,IAAb;AACA;;AAEJ;AACI,aAAKG,KAAL,CAAW,wBAAX;AAxBR;;AA2BA,WAAO;AACHE,MAAAA,IAAI,EAAE,YADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,WAAL,CAAiBb,KAAjB,EAAwB,KAAKC,OAAL,CAAaC,UAArC,CAFF;AAGHN,MAAAA,IAAI,EAAE,KAAKK,OAAL,CAAaa,cAAb,CAA4Bd,KAA5B;AAHH,KAAP;AAKH,GAzCY;AA0Cbe,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKC,KAAL,CAAWD,IAAI,CAACpB,IAAhB;AACH;AA5CY,CAAjB","sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)\nvar SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)\nvar GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nvar TILDE = 0x007E;           // U+007E TILDE (~)\n\n// + | > | ~ | /deep/\nmodule.exports = {\n    name: 'Combinator',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n        switch (code) {\n            case GREATERTHANSIGN:\n            case PLUSSIGN:\n            case TILDE:\n                this.scanner.next();\n                break;\n\n            case SOLIDUS:\n                this.scanner.next();\n\n                if (this.scanner.tokenType !== IDENT || this.scanner.lookupValue(0, 'deep') === false) {\n                    this.error('Identifier `deep` is expected');\n                }\n\n                this.scanner.next();\n\n                if (!this.scanner.isDelim(SOLIDUS)) {\n                    this.error('Solidus is expected');\n                }\n\n                this.scanner.next();\n                break;\n\n            default:\n                this.error('Combinator is expected');\n        }\n\n        return {\n            type: 'Combinator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}