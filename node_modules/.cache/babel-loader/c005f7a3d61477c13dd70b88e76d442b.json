{"ast":null,"code":"var COMMA = require('../../tokenizer').TYPE.Comma;\n\nmodule.exports = {\n  name: 'MediaQueryList',\n  structure: {\n    children: [['MediaQuery']]\n  },\n  parse: function (relative) {\n    var children = this.createList();\n    this.scanner.skipSC();\n\n    while (!this.scanner.eof) {\n      children.push(this.MediaQuery(relative));\n\n      if (this.scanner.tokenType !== COMMA) {\n        break;\n      }\n\n      this.scanner.next();\n    }\n\n    return {\n      type: 'MediaQueryList',\n      loc: this.getLocationFromList(children),\n      children: children\n    };\n  },\n  generate: function (node) {\n    this.children(node, function () {\n      this.chunk(',');\n    });\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/MediaQueryList.js"],"names":["COMMA","require","TYPE","Comma","module","exports","name","structure","children","parse","relative","createList","scanner","skipSC","eof","push","MediaQuery","tokenType","next","type","loc","getLocationFromList","generate","node","chunk"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BC,IAA3B,CAAgCC,KAA5C;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,gBADO;AAEbC,EAAAA,SAAS,EAAE;AACPC,IAAAA,QAAQ,EAAE,CAAC,CACP,YADO,CAAD;AADH,GAFE;AAObC,EAAAA,KAAK,EAAE,UAASC,QAAT,EAAmB;AACtB,QAAIF,QAAQ,GAAG,KAAKG,UAAL,EAAf;AAEA,SAAKC,OAAL,CAAaC,MAAb;;AAEA,WAAO,CAAC,KAAKD,OAAL,CAAaE,GAArB,EAA0B;AACtBN,MAAAA,QAAQ,CAACO,IAAT,CAAc,KAAKC,UAAL,CAAgBN,QAAhB,CAAd;;AAEA,UAAI,KAAKE,OAAL,CAAaK,SAAb,KAA2BjB,KAA/B,EAAsC;AAClC;AACH;;AAED,WAAKY,OAAL,CAAaM,IAAb;AACH;;AAED,WAAO;AACHC,MAAAA,IAAI,EAAE,gBADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,mBAAL,CAAyBb,QAAzB,CAFF;AAGHA,MAAAA,QAAQ,EAAEA;AAHP,KAAP;AAKH,GA3BY;AA4Bbc,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKf,QAAL,CAAce,IAAd,EAAoB,YAAW;AAC3B,WAAKC,KAAL,CAAW,GAAX;AACH,KAFD;AAGH;AAhCY,CAAjB","sourcesContent":["var COMMA = require('../../tokenizer').TYPE.Comma;\n\nmodule.exports = {\n    name: 'MediaQueryList',\n    structure: {\n        children: [[\n            'MediaQuery'\n        ]]\n    },\n    parse: function(relative) {\n        var children = this.createList();\n\n        this.scanner.skipSC();\n\n        while (!this.scanner.eof) {\n            children.push(this.MediaQuery(relative));\n\n            if (this.scanner.tokenType !== COMMA) {\n                break;\n            }\n\n            this.scanner.next();\n        }\n\n        return {\n            type: 'MediaQueryList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function() {\n            this.chunk(',');\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}