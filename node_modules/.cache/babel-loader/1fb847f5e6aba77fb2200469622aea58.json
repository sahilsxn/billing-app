{"ast":null,"code":"var EOF = 0; // https://drafts.csswg.org/css-syntax-3/\n// ยง 4.2. Definitions\n// digit\n// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).\n\nfunction isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n} // hex digit\n// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),\n// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).\n\n\nfunction isHexDigit(code) {\n  return isDigit(code) || // 0 .. 9\n  code >= 0x0041 && code <= 0x0046 || // A .. F\n  code >= 0x0061 && code <= 0x0066 // a .. f\n  ;\n} // uppercase letter\n// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).\n\n\nfunction isUppercaseLetter(code) {\n  return code >= 0x0041 && code <= 0x005A;\n} // lowercase letter\n// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).\n\n\nfunction isLowercaseLetter(code) {\n  return code >= 0x0061 && code <= 0x007A;\n} // letter\n// An uppercase letter or a lowercase letter.\n\n\nfunction isLetter(code) {\n  return isUppercaseLetter(code) || isLowercaseLetter(code);\n} // non-ASCII code point\n// A code point with a value equal to or greater than U+0080 <control>.\n\n\nfunction isNonAscii(code) {\n  return code >= 0x0080;\n} // name-start code point\n// A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n\n\nfunction isNameStart(code) {\n  return isLetter(code) || isNonAscii(code) || code === 0x005F;\n} // name code point\n// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).\n\n\nfunction isName(code) {\n  return isNameStart(code) || isDigit(code) || code === 0x002D;\n} // non-printable code point\n// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,\n// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.\n\n\nfunction isNonPrintable(code) {\n  return code >= 0x0000 && code <= 0x0008 || code === 0x000B || code >= 0x000E && code <= 0x001F || code === 0x007F;\n} // newline\n// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,\n// as they are converted to U+000A LINE FEED during preprocessing.\n// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED\n\n\nfunction isNewline(code) {\n  return code === 0x000A || code === 0x000D || code === 0x000C;\n} // whitespace\n// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.\n\n\nfunction isWhiteSpace(code) {\n  return isNewline(code) || code === 0x0020 || code === 0x0009;\n} // ยง 4.3.8. Check if two code points are a valid escape\n\n\nfunction isValidEscape(first, second) {\n  // If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n  if (first !== 0x005C) {\n    return false;\n  } // Otherwise, if the second code point is a newline or EOF, return false.\n\n\n  if (isNewline(second) || second === EOF) {\n    return false;\n  } // Otherwise, return true.\n\n\n  return true;\n} // ยง 4.3.9. Check if three code points would start an identifier\n\n\nfunction isIdentifierStart(first, second, third) {\n  // Look at the first code point:\n  // U+002D HYPHEN-MINUS\n  if (first === 0x002D) {\n    // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,\n    // or the second and third code points are a valid escape, return true. Otherwise, return false.\n    return isNameStart(second) || second === 0x002D || isValidEscape(second, third);\n  } // name-start code point\n\n\n  if (isNameStart(first)) {\n    // Return true.\n    return true;\n  } // U+005C REVERSE SOLIDUS (\\)\n\n\n  if (first === 0x005C) {\n    // If the first and second code points are a valid escape, return true. Otherwise, return false.\n    return isValidEscape(first, second);\n  } // anything else\n  // Return false.\n\n\n  return false;\n} // ยง 4.3.10. Check if three code points would start a number\n\n\nfunction isNumberStart(first, second, third) {\n  // Look at the first code point:\n  // U+002B PLUS SIGN (+)\n  // U+002D HYPHEN-MINUS (-)\n  if (first === 0x002B || first === 0x002D) {\n    // If the second code point is a digit, return true.\n    if (isDigit(second)) {\n      return 2;\n    } // Otherwise, if the second code point is a U+002E FULL STOP (.)\n    // and the third code point is a digit, return true.\n    // Otherwise, return false.\n\n\n    return second === 0x002E && isDigit(third) ? 3 : 0;\n  } // U+002E FULL STOP (.)\n\n\n  if (first === 0x002E) {\n    // If the second code point is a digit, return true. Otherwise, return false.\n    return isDigit(second) ? 2 : 0;\n  } // digit\n\n\n  if (isDigit(first)) {\n    // Return true.\n    return 1;\n  } // anything else\n  // Return false.\n\n\n  return 0;\n} //\n// Misc\n//\n// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\n\n\nfunction isBOM(code) {\n  // UTF-16BE\n  if (code === 0xFEFF) {\n    return 1;\n  } // UTF-16LE\n\n\n  if (code === 0xFFFE) {\n    return 1;\n  }\n\n  return 0;\n} // Fast code category\n//\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we define a maps for 0..127 codes only\n\n\nvar CATEGORY = new Array(0x80);\ncharCodeCategory.Eof = 0x80;\ncharCodeCategory.WhiteSpace = 0x82;\ncharCodeCategory.Digit = 0x83;\ncharCodeCategory.NameStart = 0x84;\ncharCodeCategory.NonPrintable = 0x85;\n\nfor (var i = 0; i < CATEGORY.length; i++) {\n  switch (true) {\n    case isWhiteSpace(i):\n      CATEGORY[i] = charCodeCategory.WhiteSpace;\n      break;\n\n    case isDigit(i):\n      CATEGORY[i] = charCodeCategory.Digit;\n      break;\n\n    case isNameStart(i):\n      CATEGORY[i] = charCodeCategory.NameStart;\n      break;\n\n    case isNonPrintable(i):\n      CATEGORY[i] = charCodeCategory.NonPrintable;\n      break;\n\n    default:\n      CATEGORY[i] = i || charCodeCategory.Eof;\n  }\n}\n\nfunction charCodeCategory(code) {\n  return code < 0x80 ? CATEGORY[code] : charCodeCategory.NameStart;\n}\n\n;\nmodule.exports = {\n  isDigit: isDigit,\n  isHexDigit: isHexDigit,\n  isUppercaseLetter: isUppercaseLetter,\n  isLowercaseLetter: isLowercaseLetter,\n  isLetter: isLetter,\n  isNonAscii: isNonAscii,\n  isNameStart: isNameStart,\n  isName: isName,\n  isNonPrintable: isNonPrintable,\n  isNewline: isNewline,\n  isWhiteSpace: isWhiteSpace,\n  isValidEscape: isValidEscape,\n  isIdentifierStart: isIdentifierStart,\n  isNumberStart: isNumberStart,\n  isBOM: isBOM,\n  charCodeCategory: charCodeCategory\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/tokenizer/char-code-definitions.js"],"names":["EOF","isDigit","code","isHexDigit","isUppercaseLetter","isLowercaseLetter","isLetter","isNonAscii","isNameStart","isName","isNonPrintable","isNewline","isWhiteSpace","isValidEscape","first","second","isIdentifierStart","third","isNumberStart","isBOM","CATEGORY","Array","charCodeCategory","Eof","WhiteSpace","Digit","NameStart","NonPrintable","i","length","module","exports"],"mappings":"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","sourcesContent":["var EOF = 0;\n\n// https://drafts.csswg.org/css-syntax-3/\n// ยง 4.2. Definitions\n\n// digit\n// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).\nfunction isDigit(code) {\n    return code >= 0x0030 && code <= 0x0039;\n}\n\n// hex digit\n// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),\n// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).\nfunction isHexDigit(code) {\n    return (\n        isDigit(code) || // 0 .. 9\n        (code >= 0x0041 && code <= 0x0046) || // A .. F\n        (code >= 0x0061 && code <= 0x0066)    // a .. f\n    );\n}\n\n// uppercase letter\n// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).\nfunction isUppercaseLetter(code) {\n    return code >= 0x0041 && code <= 0x005A;\n}\n\n// lowercase letter\n// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).\nfunction isLowercaseLetter(code) {\n    return code >= 0x0061 && code <= 0x007A;\n}\n\n// letter\n// An uppercase letter or a lowercase letter.\nfunction isLetter(code) {\n    return isUppercaseLetter(code) || isLowercaseLetter(code);\n}\n\n// non-ASCII code point\n// A code point with a value equal to or greater than U+0080 <control>.\nfunction isNonAscii(code) {\n    return code >= 0x0080;\n}\n\n// name-start code point\n// A letter, a non-ASCII code point, or U+005F LOW LINE (_).\nfunction isNameStart(code) {\n    return isLetter(code) || isNonAscii(code) || code === 0x005F;\n}\n\n// name code point\n// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).\nfunction isName(code) {\n    return isNameStart(code) || isDigit(code) || code === 0x002D;\n}\n\n// non-printable code point\n// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,\n// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.\nfunction isNonPrintable(code) {\n    return (\n        (code >= 0x0000 && code <= 0x0008) ||\n        (code === 0x000B) ||\n        (code >= 0x000E && code <= 0x001F) ||\n        (code === 0x007F)\n    );\n}\n\n// newline\n// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,\n// as they are converted to U+000A LINE FEED during preprocessing.\n// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED\nfunction isNewline(code) {\n    return code === 0x000A || code === 0x000D || code === 0x000C;\n}\n\n// whitespace\n// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.\nfunction isWhiteSpace(code) {\n    return isNewline(code) || code === 0x0020 || code === 0x0009;\n}\n\n// ยง 4.3.8. Check if two code points are a valid escape\nfunction isValidEscape(first, second) {\n    // If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n    if (first !== 0x005C) {\n        return false;\n    }\n\n    // Otherwise, if the second code point is a newline or EOF, return false.\n    if (isNewline(second) || second === EOF) {\n        return false;\n    }\n\n    // Otherwise, return true.\n    return true;\n}\n\n// ยง 4.3.9. Check if three code points would start an identifier\nfunction isIdentifierStart(first, second, third) {\n    // Look at the first code point:\n\n    // U+002D HYPHEN-MINUS\n    if (first === 0x002D) {\n        // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,\n        // or the second and third code points are a valid escape, return true. Otherwise, return false.\n        return (\n            isNameStart(second) ||\n            second === 0x002D ||\n            isValidEscape(second, third)\n        );\n    }\n\n    // name-start code point\n    if (isNameStart(first)) {\n        // Return true.\n        return true;\n    }\n\n    // U+005C REVERSE SOLIDUS (\\)\n    if (first === 0x005C) {\n        // If the first and second code points are a valid escape, return true. Otherwise, return false.\n        return isValidEscape(first, second);\n    }\n\n    // anything else\n    // Return false.\n    return false;\n}\n\n// ยง 4.3.10. Check if three code points would start a number\nfunction isNumberStart(first, second, third) {\n    // Look at the first code point:\n\n    // U+002B PLUS SIGN (+)\n    // U+002D HYPHEN-MINUS (-)\n    if (first === 0x002B || first === 0x002D) {\n        // If the second code point is a digit, return true.\n        if (isDigit(second)) {\n            return 2;\n        }\n\n        // Otherwise, if the second code point is a U+002E FULL STOP (.)\n        // and the third code point is a digit, return true.\n        // Otherwise, return false.\n        return second === 0x002E && isDigit(third) ? 3 : 0;\n    }\n\n    // U+002E FULL STOP (.)\n    if (first === 0x002E) {\n        // If the second code point is a digit, return true. Otherwise, return false.\n        return isDigit(second) ? 2 : 0;\n    }\n\n    // digit\n    if (isDigit(first)) {\n        // Return true.\n        return 1;\n    }\n\n    // anything else\n    // Return false.\n    return 0;\n}\n\n//\n// Misc\n//\n\n// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\nfunction isBOM(code) {\n    // UTF-16BE\n    if (code === 0xFEFF) {\n        return 1;\n    }\n\n    // UTF-16LE\n    if (code === 0xFFFE) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// Fast code category\n//\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we define a maps for 0..127 codes only\nvar CATEGORY = new Array(0x80);\ncharCodeCategory.Eof = 0x80;\ncharCodeCategory.WhiteSpace = 0x82;\ncharCodeCategory.Digit = 0x83;\ncharCodeCategory.NameStart = 0x84;\ncharCodeCategory.NonPrintable = 0x85;\n\nfor (var i = 0; i < CATEGORY.length; i++) {\n    switch (true) {\n        case isWhiteSpace(i):\n            CATEGORY[i] = charCodeCategory.WhiteSpace;\n            break;\n\n        case isDigit(i):\n            CATEGORY[i] = charCodeCategory.Digit;\n            break;\n\n        case isNameStart(i):\n            CATEGORY[i] = charCodeCategory.NameStart;\n            break;\n\n        case isNonPrintable(i):\n            CATEGORY[i] = charCodeCategory.NonPrintable;\n            break;\n\n        default:\n            CATEGORY[i] = i || charCodeCategory.Eof;\n    }\n}\n\nfunction charCodeCategory(code) {\n    return code < 0x80 ? CATEGORY[code] : charCodeCategory.NameStart;\n};\n\nmodule.exports = {\n    isDigit: isDigit,\n    isHexDigit: isHexDigit,\n    isUppercaseLetter: isUppercaseLetter,\n    isLowercaseLetter: isLowercaseLetter,\n    isLetter: isLetter,\n    isNonAscii: isNonAscii,\n    isNameStart: isNameStart,\n    isName: isName,\n    isNonPrintable: isNonPrintable,\n    isNewline: isNewline,\n    isWhiteSpace: isWhiteSpace,\n    isValidEscape: isValidEscape,\n    isIdentifierStart: isIdentifierStart,\n    isNumberStart: isNumberStart,\n\n    isBOM: isBOM,\n    charCodeCategory: charCodeCategory\n};\n"]},"metadata":{},"sourceType":"script"}