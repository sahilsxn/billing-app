{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar rawMode = require('./Raw').mode;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\n\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, rawMode.semicolonIncluded, true);\n}\n\nmodule.exports = {\n  name: 'DeclarationList',\n  structure: {\n    children: [['Declaration']]\n  },\n  parse: function () {\n    var children = this.createList();\n\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case WHITESPACE:\n        case COMMENT:\n        case SEMICOLON:\n          this.scanner.next();\n          break;\n\n        default:\n          children.push(this.parseWithFallback(this.Declaration, consumeRaw));\n      }\n    }\n\n    return {\n      type: 'DeclarationList',\n      loc: this.getLocationFromList(children),\n      children: children\n    };\n  },\n  generate: function (node) {\n    this.children(node, function (prev) {\n      if (prev.type === 'Declaration') {\n        this.chunk(';');\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/DeclarationList.js"],"names":["TYPE","require","rawMode","mode","WHITESPACE","WhiteSpace","COMMENT","Comment","SEMICOLON","Semicolon","consumeRaw","startToken","Raw","semicolonIncluded","module","exports","name","structure","children","parse","createList","scan","scanner","eof","tokenType","next","push","parseWithFallback","Declaration","type","loc","getLocationFromList","generate","node","prev","chunk"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AACA,IAAIE,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiBE,IAA/B;;AAEA,IAAIC,UAAU,GAAGJ,IAAI,CAACK,UAAtB;AACA,IAAIC,OAAO,GAAGN,IAAI,CAACO,OAAnB;AACA,IAAIC,SAAS,GAAGR,IAAI,CAACS,SAArB;;AAEA,SAASC,UAAT,CAAoBC,UAApB,EAAgC;AAC5B,SAAO,KAAKC,GAAL,CAASD,UAAT,EAAqBT,OAAO,CAACW,iBAA7B,EAAgD,IAAhD,CAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,iBADO;AAEbC,EAAAA,SAAS,EAAE;AACPC,IAAAA,QAAQ,EAAE,CAAC,CACP,aADO,CAAD;AADH,GAFE;AAObC,EAAAA,KAAK,EAAE,YAAW;AACd,QAAID,QAAQ,GAAG,KAAKE,UAAL,EAAf;;AAEAC,IAAAA,IAAI,EACJ,OAAO,CAAC,KAAKC,OAAL,CAAaC,GAArB,EAA0B;AACtB,cAAQ,KAAKD,OAAL,CAAaE,SAArB;AACI,aAAKpB,UAAL;AACA,aAAKE,OAAL;AACA,aAAKE,SAAL;AACI,eAAKc,OAAL,CAAaG,IAAb;AACA;;AAEJ;AACIP,UAAAA,QAAQ,CAACQ,IAAT,CAAc,KAAKC,iBAAL,CAAuB,KAAKC,WAA5B,EAAyClB,UAAzC,CAAd;AARR;AAUH;;AAED,WAAO;AACHmB,MAAAA,IAAI,EAAE,iBADH;AAEHC,MAAAA,GAAG,EAAE,KAAKC,mBAAL,CAAyBb,QAAzB,CAFF;AAGHA,MAAAA,QAAQ,EAAEA;AAHP,KAAP;AAKH,GA7BY;AA8Bbc,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,SAAKf,QAAL,CAAce,IAAd,EAAoB,UAASC,IAAT,EAAe;AAC/B,UAAIA,IAAI,CAACL,IAAL,KAAc,aAAlB,EAAiC;AAC7B,aAAKM,KAAL,CAAW,GAAX;AACH;AACJ,KAJD;AAKH;AApCY,CAAjB","sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('./Raw').mode;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, rawMode.semicolonIncluded, true);\n}\n\nmodule.exports = {\n    name: 'DeclarationList',\n    structure: {\n        children: [[\n            'Declaration'\n        ]]\n    },\n    parse: function() {\n        var children = this.createList();\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                case COMMENT:\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                default:\n                    children.push(this.parseWithFallback(this.Declaration, consumeRaw));\n            }\n        }\n\n        return {\n            type: 'DeclarationList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function(prev) {\n            if (prev.type === 'Declaration') {\n                this.chunk(';');\n            }\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}