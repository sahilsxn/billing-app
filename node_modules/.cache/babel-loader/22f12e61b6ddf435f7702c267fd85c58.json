{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar STRING = TYPE.String;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar DOLLARSIGN = 0x0024; // U+0024 DOLLAR SIGN ($)\n\nvar ASTERISK = 0x002A; // U+002A ASTERISK (*)\n\nvar EQUALSSIGN = 0x003D; // U+003D EQUALS SIGN (=)\n\nvar CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\n\nvar VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\n\nvar TILDE = 0x007E; // U+007E TILDE (~)\n\nfunction getAttributeName() {\n  if (this.scanner.eof) {\n    this.error('Unexpected end of input');\n  }\n\n  var start = this.scanner.tokenStart;\n  var expectIdent = false;\n  var checkColon = true;\n\n  if (this.scanner.isDelim(ASTERISK)) {\n    expectIdent = true;\n    checkColon = false;\n    this.scanner.next();\n  } else if (!this.scanner.isDelim(VERTICALLINE)) {\n    this.eat(IDENT);\n  }\n\n  if (this.scanner.isDelim(VERTICALLINE)) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {\n      this.scanner.next();\n      this.eat(IDENT);\n    } else if (expectIdent) {\n      this.error('Identifier is expected', this.scanner.tokenEnd);\n    }\n  } else if (expectIdent) {\n    this.error('Vertical line is expected');\n  }\n\n  if (checkColon && this.scanner.tokenType === COLON) {\n    this.scanner.next();\n    this.eat(IDENT);\n  }\n\n  return {\n    type: 'Identifier',\n    loc: this.getLocation(start, this.scanner.tokenStart),\n    name: this.scanner.substrToCursor(start)\n  };\n}\n\nfunction getOperator() {\n  var start = this.scanner.tokenStart;\n  var code = this.scanner.source.charCodeAt(start);\n\n  if (code !== EQUALSSIGN && // =\n  code !== TILDE && // ~=\n  code !== CIRCUMFLEXACCENT && // ^=\n  code !== DOLLARSIGN && // $=\n  code !== ASTERISK && // *=\n  code !== VERTICALLINE // |=\n  ) {\n    this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n  }\n\n  this.scanner.next();\n\n  if (code !== EQUALSSIGN) {\n    if (!this.scanner.isDelim(EQUALSSIGN)) {\n      this.error('Equal sign is expected');\n    }\n\n    this.scanner.next();\n  }\n\n  return this.scanner.substrToCursor(start);\n} // '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\n\n\nmodule.exports = {\n  name: 'AttributeSelector',\n  structure: {\n    name: 'Identifier',\n    matcher: [String, null],\n    value: ['String', 'Identifier', null],\n    flags: [String, null]\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n    var name;\n    var matcher = null;\n    var value = null;\n    var flags = null;\n    this.eat(LEFTSQUAREBRACKET);\n    this.scanner.skipSC();\n    name = getAttributeName.call(this);\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n      // avoid case `[name i]`\n      if (this.scanner.tokenType !== IDENT) {\n        matcher = getOperator.call(this);\n        this.scanner.skipSC();\n        value = this.scanner.tokenType === STRING ? this.String() : this.Identifier();\n        this.scanner.skipSC();\n      } // attribute flags\n\n\n      if (this.scanner.tokenType === IDENT) {\n        flags = this.scanner.getTokenValue();\n        this.scanner.next();\n        this.scanner.skipSC();\n      }\n    }\n\n    this.eat(RIGHTSQUAREBRACKET);\n    return {\n      type: 'AttributeSelector',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      matcher: matcher,\n      value: value,\n      flags: flags\n    };\n  },\n  generate: function (node) {\n    var flagsPrefix = ' ';\n    this.chunk('[');\n    this.node(node.name);\n\n    if (node.matcher !== null) {\n      this.chunk(node.matcher);\n\n      if (node.value !== null) {\n        this.node(node.value); // space between string and flags is not required\n\n        if (node.value.type === 'String') {\n          flagsPrefix = '';\n        }\n      }\n    }\n\n    if (node.flags !== null) {\n      this.chunk(flagsPrefix);\n      this.chunk(node.flags);\n    }\n\n    this.chunk(']');\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/AttributeSelector.js"],"names":["TYPE","require","IDENT","Ident","STRING","String","COLON","Colon","LEFTSQUAREBRACKET","LeftSquareBracket","RIGHTSQUAREBRACKET","RightSquareBracket","DOLLARSIGN","ASTERISK","EQUALSSIGN","CIRCUMFLEXACCENT","VERTICALLINE","TILDE","getAttributeName","scanner","eof","error","start","tokenStart","expectIdent","checkColon","isDelim","next","eat","source","charCodeAt","tokenEnd","tokenType","type","loc","getLocation","name","substrToCursor","getOperator","code","module","exports","structure","matcher","value","flags","parse","skipSC","call","Identifier","getTokenValue","generate","node","flagsPrefix","chunk"],"mappings":"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","sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar STRING = TYPE.String;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar DOLLARSIGN = 0x0024;       // U+0024 DOLLAR SIGN ($)\nvar ASTERISK = 0x002A;         // U+002A ASTERISK (*)\nvar EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)\nvar CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nvar VERTICALLINE = 0x007C;     // U+007C VERTICAL LINE (|)\nvar TILDE = 0x007E;            // U+007E TILDE (~)\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdent = false;\n    var checkColon = true;\n\n    if (this.scanner.isDelim(ASTERISK)) {\n        expectIdent = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (!this.scanner.isDelim(VERTICALLINE)) {\n        this.eat(IDENT);\n    }\n\n    if (this.scanner.isDelim(VERTICALLINE)) {\n        if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.eat(IDENT);\n        } else if (expectIdent) {\n            this.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdent) {\n        this.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON) {\n        this.scanner.next();\n        this.eat(IDENT);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var code = this.scanner.source.charCodeAt(start);\n\n    if (code !== EQUALSSIGN &&        // =\n        code !== TILDE &&             // ~=\n        code !== CIRCUMFLEXACCENT &&  // ^=\n        code !== DOLLARSIGN &&        // $=\n        code !== ASTERISK &&          // *=\n        code !== VERTICALLINE         // |=\n    ) {\n        this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    this.scanner.next();\n\n    if (code !== EQUALSSIGN) {\n        if (!this.scanner.isDelim(EQUALSSIGN)) {\n            this.error('Equal sign is expected');\n        }\n\n        this.scanner.next();\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nmodule.exports = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.eat(LEFTSQUAREBRACKET);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENT) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENT) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(node) {\n        var flagsPrefix = ' ';\n\n        this.chunk('[');\n        this.node(node.name);\n\n        if (node.matcher !== null) {\n            this.chunk(node.matcher);\n\n            if (node.value !== null) {\n                this.node(node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            this.chunk(flagsPrefix);\n            this.chunk(node.flags);\n        }\n\n        this.chunk(']');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}