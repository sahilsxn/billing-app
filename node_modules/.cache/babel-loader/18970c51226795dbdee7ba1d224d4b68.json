{"ast":null,"code":"/**\n * Takes any input and guarantees an array back.\n *\n * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.\n * - Converts `undefined` to an empty array.\n * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.\n * - Ignores input which is already an array.\n *\n * @module array-back\n * @example\n * > const arrayify = require('array-back')\n *\n * > arrayify(undefined)\n * []\n *\n * > arrayify(null)\n * [ null ]\n *\n * > arrayify(0)\n * [ 0 ]\n *\n * > arrayify([ 1, 2 ])\n * [ 1, 2 ]\n *\n * > arrayify(new Set([ 1, 2 ]))\n * [ 1, 2 ]\n *\n * > function f(){ return arrayify(arguments); }\n * > f(1,2,3)\n * [ 1, 2, 3 ]\n */\nfunction isObject(input) {\n  return typeof input === 'object' && input !== null;\n}\n\nfunction isArrayLike(input) {\n  return isObject(input) && typeof input.length === 'number';\n}\n/**\n * @param {*} - The input value to convert to an array\n * @returns {Array}\n * @alias module:array-back\n */\n\n\nfunction arrayify(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else if (input === undefined) {\n    return [];\n  } else if (isArrayLike(input) || input instanceof Set) {\n    return Array.from(input);\n  } else {\n    return [input];\n  }\n}\n\nexport default arrayify;","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/array-back/index.mjs"],"names":["isObject","input","isArrayLike","length","arrayify","Array","isArray","undefined","Set","from"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA9C;AACD;;AAED,SAASC,WAAT,CAAsBD,KAAtB,EAA6B;AAC3B,SAAOD,QAAQ,CAACC,KAAD,CAAR,IAAmB,OAAOA,KAAK,CAACE,MAAb,KAAwB,QAAlD;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAmBH,KAAnB,EAA0B;AACxB,MAAII,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,KAAKM,SAAd,EAAyB;AAC9B,WAAO,EAAP;AACD,GAFM,MAEA,IAAIL,WAAW,CAACD,KAAD,CAAX,IAAsBA,KAAK,YAAYO,GAA3C,EAAgD;AACrD,WAAOH,KAAK,CAACI,IAAN,CAAWR,KAAX,CAAP;AACD,GAFM,MAEA;AACL,WAAO,CAACA,KAAD,CAAP;AACD;AACF;;AAED,eAAeG,QAAf","sourcesContent":["/**\n * Takes any input and guarantees an array back.\n *\n * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.\n * - Converts `undefined` to an empty array.\n * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.\n * - Ignores input which is already an array.\n *\n * @module array-back\n * @example\n * > const arrayify = require('array-back')\n *\n * > arrayify(undefined)\n * []\n *\n * > arrayify(null)\n * [ null ]\n *\n * > arrayify(0)\n * [ 0 ]\n *\n * > arrayify([ 1, 2 ])\n * [ 1, 2 ]\n *\n * > arrayify(new Set([ 1, 2 ]))\n * [ 1, 2 ]\n *\n * > function f(){ return arrayify(arguments); }\n * > f(1,2,3)\n * [ 1, 2, 3 ]\n */\n\nfunction isObject (input) {\n  return typeof input === 'object' && input !== null\n}\n\nfunction isArrayLike (input) {\n  return isObject(input) && typeof input.length === 'number'\n}\n\n/**\n * @param {*} - The input value to convert to an array\n * @returns {Array}\n * @alias module:array-back\n */\nfunction arrayify (input) {\n  if (Array.isArray(input)) {\n    return input\n  } else if (input === undefined) {\n    return []\n  } else if (isArrayLike(input) || input instanceof Set) {\n    return Array.from(input)\n  } else {\n    return [input]\n  }\n}\n\nexport default arrayify\n"]},"metadata":{},"sourceType":"module"}