{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar DELIM = TYPE.Delim;\nvar IDENT = TYPE.Ident;\nvar DIMENSION = TYPE.Dimension;\nvar PERCENTAGE = TYPE.Percentage;\nvar NUMBER = TYPE.Number;\nvar HASH = TYPE.Hash;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\n\nvar ASTERISK = 0x002A; // U+002A ASTERISK (*)\n\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\n\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\nvar GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\n\nvar VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\n\nvar TILDE = 0x007E; // U+007E TILDE (~)\n\nfunction getNode(context) {\n  switch (this.scanner.tokenType) {\n    case LEFTSQUAREBRACKET:\n      return this.AttributeSelector();\n\n    case HASH:\n      return this.IdSelector();\n\n    case COLON:\n      if (this.scanner.lookupType(1) === COLON) {\n        return this.PseudoElementSelector();\n      } else {\n        return this.PseudoClassSelector();\n      }\n\n    case IDENT:\n      return this.TypeSelector();\n\n    case NUMBER:\n    case PERCENTAGE:\n      return this.Percentage();\n\n    case DIMENSION:\n      // throws when .123ident\n      if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === FULLSTOP) {\n        this.error('Identifier is expected', this.scanner.tokenStart + 1);\n      }\n\n      break;\n\n    case DELIM:\n      var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n      switch (code) {\n        case PLUSSIGN:\n        case GREATERTHANSIGN:\n        case TILDE:\n          context.space = null;\n          context.ignoreWSAfter = true;\n          return this.Combinator();\n\n        case SOLIDUS:\n          // /deep/\n          return this.Combinator();\n\n        case FULLSTOP:\n          return this.ClassSelector();\n\n        case ASTERISK:\n        case VERTICALLINE:\n          return this.TypeSelector();\n\n        case NUMBERSIGN:\n          return this.IdSelector();\n      }\n\n      break;\n  }\n}\n\n;\nmodule.exports = {\n  getNode: getNode\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/React 3/billing-app/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/scope/selector.js"],"names":["TYPE","require","DELIM","Delim","IDENT","Ident","DIMENSION","Dimension","PERCENTAGE","Percentage","NUMBER","Number","HASH","Hash","COLON","Colon","LEFTSQUAREBRACKET","LeftSquareBracket","NUMBERSIGN","ASTERISK","PLUSSIGN","SOLIDUS","FULLSTOP","GREATERTHANSIGN","VERTICALLINE","TILDE","getNode","context","scanner","tokenType","AttributeSelector","IdSelector","lookupType","PseudoElementSelector","PseudoClassSelector","TypeSelector","source","charCodeAt","tokenStart","error","code","space","ignoreWSAfter","Combinator","ClassSelector","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AAEA,IAAIE,KAAK,GAAGF,IAAI,CAACG,KAAjB;AACA,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAjB;AACA,IAAIC,SAAS,GAAGN,IAAI,CAACO,SAArB;AACA,IAAIC,UAAU,GAAGR,IAAI,CAACS,UAAtB;AACA,IAAIC,MAAM,GAAGV,IAAI,CAACW,MAAlB;AACA,IAAIC,IAAI,GAAGZ,IAAI,CAACa,IAAhB;AACA,IAAIC,KAAK,GAAGd,IAAI,CAACe,KAAjB;AACA,IAAIC,iBAAiB,GAAGhB,IAAI,CAACiB,iBAA7B;AACA,IAAIC,UAAU,GAAG,MAAjB,C,CAA8B;;AAC9B,IAAIC,QAAQ,GAAG,MAAf,C,CAA8B;;AAC9B,IAAIC,QAAQ,GAAG,MAAf,C,CAA8B;;AAC9B,IAAIC,OAAO,GAAG,MAAd,C,CAA8B;;AAC9B,IAAIC,QAAQ,GAAG,MAAf,C,CAA8B;;AAC9B,IAAIC,eAAe,GAAG,MAAtB,C,CAA8B;;AAC9B,IAAIC,YAAY,GAAG,MAAnB,C,CAA8B;;AAC9B,IAAIC,KAAK,GAAG,MAAZ,C,CAA8B;;AAE9B,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACtB,UAAQ,KAAKC,OAAL,CAAaC,SAArB;AACI,SAAKb,iBAAL;AACI,aAAO,KAAKc,iBAAL,EAAP;;AAEJ,SAAKlB,IAAL;AACI,aAAO,KAAKmB,UAAL,EAAP;;AAEJ,SAAKjB,KAAL;AACI,UAAI,KAAKc,OAAL,CAAaI,UAAb,CAAwB,CAAxB,MAA+BlB,KAAnC,EAA0C;AACtC,eAAO,KAAKmB,qBAAL,EAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAKC,mBAAL,EAAP;AACH;;AAEL,SAAK9B,KAAL;AACI,aAAO,KAAK+B,YAAL,EAAP;;AAEJ,SAAKzB,MAAL;AACA,SAAKF,UAAL;AACI,aAAO,KAAKC,UAAL,EAAP;;AAEJ,SAAKH,SAAL;AACI;AACA,UAAI,KAAKsB,OAAL,CAAaQ,MAAb,CAAoBC,UAApB,CAA+B,KAAKT,OAAL,CAAaU,UAA5C,MAA4DhB,QAAhE,EAA0E;AACtE,aAAKiB,KAAL,CAAW,wBAAX,EAAqC,KAAKX,OAAL,CAAaU,UAAb,GAA0B,CAA/D;AACH;;AACD;;AAEJ,SAAKpC,KAAL;AACI,UAAIsC,IAAI,GAAG,KAAKZ,OAAL,CAAaQ,MAAb,CAAoBC,UAApB,CAA+B,KAAKT,OAAL,CAAaU,UAA5C,CAAX;;AAEA,cAAQE,IAAR;AACI,aAAKpB,QAAL;AACA,aAAKG,eAAL;AACA,aAAKE,KAAL;AACIE,UAAAA,OAAO,CAACc,KAAR,GAAgB,IAAhB;AACAd,UAAAA,OAAO,CAACe,aAAR,GAAwB,IAAxB;AACA,iBAAO,KAAKC,UAAL,EAAP;;AAEJ,aAAKtB,OAAL;AAAe;AACX,iBAAO,KAAKsB,UAAL,EAAP;;AAEJ,aAAKrB,QAAL;AACI,iBAAO,KAAKsB,aAAL,EAAP;;AAEJ,aAAKzB,QAAL;AACA,aAAKK,YAAL;AACI,iBAAO,KAAKW,YAAL,EAAP;;AAEJ,aAAKjB,UAAL;AACI,iBAAO,KAAKa,UAAL,EAAP;AAnBR;;AAsBA;AArDR;AAuDH;;AAAA;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACbpB,EAAAA,OAAO,EAAEA;AADI,CAAjB","sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar DELIM = TYPE.Delim;\nvar IDENT = TYPE.Ident;\nvar DIMENSION = TYPE.Dimension;\nvar PERCENTAGE = TYPE.Percentage;\nvar NUMBER = TYPE.Number;\nvar HASH = TYPE.Hash;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)\nvar ASTERISK = 0x002A;        // U+002A ASTERISK (*)\nvar PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)\nvar SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)\nvar FULLSTOP = 0x002E;        // U+002E FULL STOP (.)\nvar GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nvar VERTICALLINE = 0x007C;    // U+007C VERTICAL LINE (|)\nvar TILDE = 0x007E;           // U+007E TILDE (~)\n\nfunction getNode(context) {\n    switch (this.scanner.tokenType) {\n        case LEFTSQUAREBRACKET:\n            return this.AttributeSelector();\n\n        case HASH:\n            return this.IdSelector();\n\n        case COLON:\n            if (this.scanner.lookupType(1) === COLON) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case IDENT:\n            return this.TypeSelector();\n\n        case NUMBER:\n        case PERCENTAGE:\n            return this.Percentage();\n\n        case DIMENSION:\n            // throws when .123ident\n            if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === FULLSTOP) {\n                this.error('Identifier is expected', this.scanner.tokenStart + 1);\n            }\n            break;\n\n        case DELIM:\n            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n            switch (code) {\n                case PLUSSIGN:\n                case GREATERTHANSIGN:\n                case TILDE:\n                    context.space = null;\n                    context.ignoreWSAfter = true;\n                    return this.Combinator();\n\n                case SOLIDUS:  // /deep/\n                    return this.Combinator();\n\n                case FULLSTOP:\n                    return this.ClassSelector();\n\n                case ASTERISK:\n                case VERTICALLINE:\n                    return this.TypeSelector();\n\n                case NUMBERSIGN:\n                    return this.IdSelector();\n            }\n\n            break;\n    }\n};\n\nmodule.exports = {\n    getNode: getNode\n};\n"]},"metadata":{},"sourceType":"script"}